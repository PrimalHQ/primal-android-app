package net.primal.wallet.data.model

import net.primal.domain.profile.ProfileData
import net.primal.domain.wallet.SubWallet
import net.primal.domain.wallet.TxState
import net.primal.domain.wallet.TxType
import net.primal.domain.wallet.WalletType

internal sealed class Transaction(
    open val transactionId: String,
    open val walletId: String,
    open val walletType: WalletType,
    open val type: TxType,
    open val state: TxState,
    open val createdAt: Long,
    open val updatedAt: Long,
    open val completedAt: Long?,
    open val userId: String,
    open val note: String?,
    open val invoice: String?,
    open val amountInBtc: Double,
    open val totalFeeInBtc: String?,
    open val zapNoteId: String?,
    open val otherUserId: String?,
    open val zapNoteAuthorId: String?,
    open val zappedByUserId: String?,
    open val otherUserProfile: ProfileData?,
) {
    data class Primal(
        override val transactionId: String,
        override val walletId: String,
        override val walletType: WalletType,
        override val type: TxType,
        override val state: TxState,
        override val createdAt: Long,
        override val updatedAt: Long,
        override val completedAt: Long?,
        override val userId: String,
        override val note: String?,
        override val invoice: String?,
        override val amountInBtc: Double,
        override val totalFeeInBtc: String?,
        override val zapNoteId: String?,
        override val otherUserId: String?,
        override val zapNoteAuthorId: String?,
        override val zappedByUserId: String?,
        override val otherUserProfile: ProfileData?,
        val walletLightningAddress: String,
        val amountInUsd: Double?,
        val isZap: Boolean,
        val isStorePurchase: Boolean,
        val userSubWallet: SubWallet,
        val userLightningAddress: String?,
        val otherLightningAddress: String?,
        val exchangeRate: String?,
        val onChainAddress: String?,
        val onChainTxId: String?,
    ) : Transaction(
        transactionId = transactionId,
        walletId = walletId,
        walletType = walletType,
        type = type,
        state = state,
        createdAt = createdAt,
        updatedAt = updatedAt,
        completedAt = completedAt,
        userId = userId,
        note = note,
        invoice = invoice,
        amountInBtc = amountInBtc,
        totalFeeInBtc = totalFeeInBtc,
        zapNoteId = zapNoteId,
        zapNoteAuthorId = zapNoteAuthorId,
        otherUserId = otherUserId,
        zappedByUserId = zappedByUserId,
        otherUserProfile = otherUserProfile,
    )

    data class NWC(
        override val transactionId: String,
        override val walletId: String,
        override val walletType: WalletType,
        override val type: TxType,
        override val state: TxState,
        override val createdAt: Long,
        override val updatedAt: Long,
        override val completedAt: Long?,
        override val userId: String,
        override val note: String?,
        override val invoice: String?,
        override val amountInBtc: Double,
        override val totalFeeInBtc: String?,
        override val zapNoteId: String?,
        override val otherUserId: String?,
        override val zapNoteAuthorId: String?,
        override val zappedByUserId: String?,
        override val otherUserProfile: ProfileData?,
        val preimage: String?,
        val descriptionHash: String?,
        val paymentHash: String?,
        val metadata: String?,
    ) : Transaction(
        transactionId = transactionId,
        walletId = walletId,
        walletType = walletType,
        type = type,
        state = state,
        createdAt = createdAt,
        updatedAt = updatedAt,
        completedAt = completedAt,
        userId = userId,
        note = note,
        invoice = invoice,
        amountInBtc = amountInBtc,
        totalFeeInBtc = totalFeeInBtc,
        zapNoteId = zapNoteId,
        otherUserId = otherUserId,
        zapNoteAuthorId = zapNoteAuthorId,
        zappedByUserId = zappedByUserId,
        otherUserProfile = otherUserProfile,
    )
}
