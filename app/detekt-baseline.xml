<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>CyclomaticComplexMethod:ArticleDetailsScreen.kt$@OptIn(ExperimentalLayoutApi::class) @Composable private fun ArticleContentWithComments( state: ArticleDetailsContract.UiState, detailsEventPublisher: (UiEvent) -&gt; Unit, articleParts: List&lt;ArticlePartRender&gt;, listState: LazyListState = rememberLazyListState(), paddingValues: PaddingValues, onArticleCommentClick: (naddr: String) -&gt; Unit, onArticleHashtagClick: (hashtag: String) -&gt; Unit, onHighlightClick: (String) -&gt; Unit, onZapOptionsClick: () -&gt; Unit, noteCallbacks: NoteCallbacks, onGoToWallet: () -&gt; Unit, onPostAction: ((FeedPostAction) -&gt; Unit)? = null, onPostLongPressAction: ((FeedPostAction) -&gt; Unit)? = null, onUiError: ((UiError) -&gt; Unit)? = null, )</ID>
    <ID>CyclomaticComplexMethod:ArticleDetailsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun ArticleDetailsScreen( detailsState: ArticleDetailsContract.UiState, articleState: ArticleContract.UiState, callbacks: ArticleDetailsContract.ScreenCallbacks, detailsEventPublisher: (UiEvent) -&gt; Unit, articleEventPublisher: (ArticleContract.UiEvent) -&gt; Unit, noteCallbacks: NoteCallbacks, )</ID>
    <ID>CyclomaticComplexMethod:ChatScreen.kt$@Composable private fun ChatMessageListItem( chatMessage: ChatMessageUi, previousMessage: ChatMessageUi? = null, nextMessage: ChatMessageUi? = null, onUrlClick: (String) -&gt; Unit, noteCallbacks: NoteCallbacks, )</ID>
    <ID>CyclomaticComplexMethod:CreateTransactionScreen.kt$@ExperimentalComposeUiApi @ExperimentalMaterial3Api @Composable fun CreateTransactionScreen( state: CreateTransactionContract.UiState, eventPublisher: (CreateTransactionContract.UiEvent) -&gt; Unit, onClose: () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:DvmFeedListItem.kt$@Composable private fun DvmFeedListItem( modifier: Modifier = Modifier, dvmFeed: DvmFeedUi, state: DvmFeedListItemContract.UiState, onFeedClick: ((dvmFeed: DvmFeedUi) -&gt; Unit)? = null, onGoToWallet: (() -&gt; Unit)? = null, eventPublisher: (DvmFeedListItemContract.UiEvent) -&gt; Unit, listItemContainerColor: Color = AppTheme.extraColorScheme.surfaceVariantAlt2, clipShape: Shape? = AppTheme.shapes.small, avatarSize: Dp = 48.dp, extended: Boolean = false, showFollowsActionsAvatarRow: Boolean = false, )</ID>
    <ID>CyclomaticComplexMethod:EventMediaGalleryScreen.kt$@UnstableApi @ExperimentalFoundationApi @Composable private fun MediaGalleryContent( pagerState: PagerState, initialAttachmentIndex: Int, initialPositionMs: Long, attachments: List&lt;EventUriUi&gt;, pagerIndicatorContainerColor: Color, immersiveMode: ImmersiveModeState?, onCurrentlyVisibleBitmap: ((Bitmap?) -&gt; Unit)? = null, )</ID>
    <ID>CyclomaticComplexMethod:FeedListBottomSheet.kt$@ExperimentalMaterial3Api @Composable private fun FeedsBottomSheet( state: FeedListContract.UiState, onFeedClick: (FeedUi) -&gt; Unit, onDismissRequest: () -&gt; Unit, sheetState: SheetState = rememberModalBottomSheetState(), eventPublisher: (FeedListContract.UiEvent) -&gt; Unit, onGoToWallet: (() -&gt; Unit)? = null, )</ID>
    <ID>CyclomaticComplexMethod:FeedListViewModel.kt$FeedListViewModel$private fun observeEvents()</ID>
    <ID>CyclomaticComplexMethod:FeedNoteCard.kt$@Composable private fun FeedNote( data: FeedPostUi, fullWidthContent: Boolean, avatarSizeDp: Dp, avatarPaddingValues: PaddingValues, notePaddingValues: PaddingValues, enableTweetsMode: Boolean, headerSingleLine: Boolean, showReplyTo: Boolean, forceContentIndent: Boolean, expanded: Boolean, textSelectable: Boolean, showNoteStatCounts: Boolean, couldAutoPlay: Boolean, noteCallbacks: NoteCallbacks, nestingCutOffLimit: Int = Int.MAX_VALUE, onPostAction: ((FeedPostAction) -&gt; Unit)? = null, onPostLongClickAction: ((FeedPostAction) -&gt; Unit)? = null, contentFooter: @Composable () -&gt; Unit = {}, onVideoSoundToggle: ((soundOn: Boolean) -&gt; Unit)? = null, )</ID>
    <ID>CyclomaticComplexMethod:FeedNoteCard.kt$@ExperimentalMaterial3Api @Composable private fun FeedNoteCard( data: FeedPostUi, state: NoteContract.UiState, eventPublisher: (UiEvent) -&gt; Unit, modifier: Modifier = Modifier, shape: Shape = CardDefaults.shape, colors: CardColors = noteCardColors(), cardPadding: PaddingValues = PaddingValues(all = 0.dp), nestingCutOffLimit: Int = Int.MAX_VALUE, enableTweetsMode: Boolean = false, headerSingleLine: Boolean = true, fullWidthContent: Boolean = false, forceContentIndent: Boolean = false, drawLineAboveAvatar: Boolean = false, drawLineBelowAvatar: Boolean = false, expanded: Boolean = false, textSelectable: Boolean = false, showReplyTo: Boolean = true, noteOptionsMenuEnabled: Boolean = true, showNoteStatCounts: Boolean = true, couldAutoPlay: Boolean = false, noteCallbacks: NoteCallbacks = NoteCallbacks(), onGoToWallet: (() -&gt; Unit)? = null, contentFooter: @Composable () -&gt; Unit = {}, )</ID>
    <ID>CyclomaticComplexMethod:LiveStreamViewModel.kt$LiveStreamViewModel$private fun observeEvents()</ID>
    <ID>CyclomaticComplexMethod:NostrUserText.kt$@Composable fun NostrUserText( displayName: String, internetIdentifier: String?, modifier: Modifier = Modifier, displayNameColor: Color = AppTheme.colorScheme.onSurface, displayNameFontWeight: FontWeight = FontWeight.Bold, fontSize: TextUnit = TextUnit.Unspecified, style: TextStyle = LocalTextStyle.current, autoResizeToFit: Boolean = false, overflow: TextOverflow = if (autoResizeToFit) { TextOverflow.Clip } else { TextOverflow.Ellipsis }, maxLines: Int = 1, internetIdentifierBadgeSize: Dp = 14.dp, internetIdentifierBadgeAlign: PlaceholderVerticalAlign = PlaceholderVerticalAlign.Center, legendaryCustomization: LegendaryCustomization? = null, annotatedStringPrefixBuilder: (AnnotatedString.Builder.() -&gt; Unit)? = null, annotatedStringSuffixBuilder: (AnnotatedString.Builder.() -&gt; Unit)? = null, )</ID>
    <ID>CyclomaticComplexMethod:NoteActionsRow.kt$@Composable fun FeedNoteActionsRow( modifier: Modifier, eventStats: EventStatsUi, isBookmarked: Boolean, highlightedNote: Boolean = false, showBookmark: Boolean = false, showCounts: Boolean = true, onPostAction: ((FeedPostAction) -&gt; Unit)? = null, onPostLongPressAction: ((FeedPostAction) -&gt; Unit)? = null, )</ID>
    <ID>CyclomaticComplexMethod:NoteContent.kt$@OptIn(ExperimentalFoundationApi::class) @Composable fun NoteContent( modifier: Modifier = Modifier, data: NoteContentUi, expanded: Boolean, noteCallbacks: NoteCallbacks, nestingLevel: Int = 0, nestingCutOffLimit: Int = Int.MAX_VALUE, maxLines: Int = Int.MAX_VALUE, overflow: TextOverflow = TextOverflow.Clip, enableTweetsMode: Boolean = false, textSelectable: Boolean = false, referencedEventsHaveBorder: Boolean = false, couldAutoPlay: Boolean = false, highlightColor: Color = AppTheme.colorScheme.secondary, contentColor: Color = AppTheme.colorScheme.onSurface, referencedEventsContainerColor: Color = AppTheme.extraColorScheme.surfaceVariantAlt1, onClick: ((offset: Offset) -&gt; Unit)? = null, onUrlClick: ((url: String) -&gt; Unit)? = null, onVideoSoundToggle: ((soundOn: Boolean) -&gt; Unit)? = null, )</ID>
    <ID>CyclomaticComplexMethod:NoteFeedLazyColumn.kt$@ExperimentalMaterial3Api @ExperimentalFoundationApi @Composable fun NoteFeedLazyColumn( modifier: Modifier = Modifier, pagingItems: LazyPagingItems&lt;FeedPostUi&gt;, streamPills: List&lt;StreamPillUi&gt;, listState: LazyListState, showPaywall: Boolean, noteCallbacks: NoteCallbacks, onGoToWallet: () -&gt; Unit, showTopZaps: Boolean = false, shouldShowLoadingState: Boolean = true, shouldShowNoContentState: Boolean = true, showReplyTo: Boolean = true, noContentVerticalArrangement: Arrangement.Vertical = Arrangement.Center, noContentPaddingValues: PaddingValues = PaddingValues(all = 0.dp), noContentText: String = stringResource(id = R.string.feed_no_content), contentPadding: PaddingValues = PaddingValues(all = 0.dp), header: @Composable (LazyItemScope.() -&gt; Unit)? = null, stickyHeader: @Composable (LazyItemScope.() -&gt; Unit)? = null, onUiError: ((UiError) -&gt; Unit)? = null, )</ID>
    <ID>CyclomaticComplexMethod:NotificationListItem.kt$@Composable private fun NotificationType.toSuffixText(usersZappedCount: Int = 0, totalSatsZapped: String? = null): String</ID>
    <ID>CyclomaticComplexMethod:NotificationTypePainter.kt$@Composable fun NotificationType.toImagePainter(): Painter</ID>
    <ID>CyclomaticComplexMethod:NotificationsScreen.kt$@ExperimentalMaterial3Api @Composable private fun NotificationsList( state: NotificationsContract.UiState, noteState: NoteContract.UiState, listState: LazyListState, seenPagingItems: LazyPagingItems&lt;NotificationUi&gt;, paddingValues: PaddingValues, noteCallbacks: NoteCallbacks, onGoToWallet: () -&gt; Unit, onPostLikeClick: (FeedPostUi) -&gt; Unit, onRepostClick: (FeedPostUi) -&gt; Unit, onZapClick: (FeedPostUi, ULong?, String?) -&gt; Unit, onPostQuoteClick: (FeedPostUi) -&gt; Unit, onBookmarkClick: (FeedPostUi) -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:OnboardingViewModel.kt$OnboardingViewModel$private fun observeEvents()</ID>
    <ID>CyclomaticComplexMethod:PremiumOrderHistoryScreen.kt$@Composable private fun SubscriptionHeader( modifier: Modifier, state: PremiumOrderHistoryContract.UiState, onExtendSubscription: (primalName: String) -&gt; Unit, onCancelSubscription: () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:ReceivePaymentScreen.kt$@Composable private fun ReceivePaymentViewer( paddingValues: PaddingValues, state: UiState, onBuyPremium: () -&gt; Unit, onCopyClick: () -&gt; Unit, onEditClick: () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:ThreadScreen.kt$@OptIn(ExperimentalLayoutApi::class, ExperimentalMaterial3Api::class) @Composable private fun ThreadLazyColumn( modifier: Modifier, state: ThreadContract.UiState, noteCallbacks: NoteCallbacks, onRootPostDeleted: () -&gt; Unit, onGoToWallet: (() -&gt; Unit), paddingValues: PaddingValues = PaddingValues(all = 0.dp), onUiError: ((UiError) -&gt; Unit)? = null, )</ID>
    <ID>CyclomaticComplexMethod:TransactionEditor.kt$@Composable private fun TransactionHeaderColumn( modifier: Modifier, uiMode: UiDensityMode, state: CreateTransactionContract.UiState, keyboardVisible: Boolean, onAmountClick: () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:TransactionEditor.kt$@ExperimentalMaterial3Api @ExperimentalComposeUiApi @Composable fun TransactionEditor( modifier: Modifier, state: CreateTransactionContract.UiState, paddingValues: PaddingValues, eventPublisher: (CreateTransactionContract.UiEvent) -&gt; Unit, onCancelClick: () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:WalletDashboardScreen.kt$@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class) @Composable fun WalletDashboardScreen( state: WalletDashboardContract.UiState, onPrimaryDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onDrawerDestinationClick: (DrawerScreenDestination) -&gt; Unit, onDrawerQrCodeClick: () -&gt; Unit, onWalletActivateClick: () -&gt; Unit, onProfileClick: (String) -&gt; Unit, onTransactionClick: (String) -&gt; Unit, onSendClick: () -&gt; Unit, onScanClick: () -&gt; Unit, onReceiveClick: () -&gt; Unit, eventPublisher: (UiEvent) -&gt; Unit, accountSwitcherCallbacks: AccountSwitcherCallbacks, )</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:PrimalDrawer.kt$val (avatarRef, usernameRef, iconRef, identifierRef, statsRef) = createRefs()</ID>
    <ID>LargeClass:NoteEditorViewModel.kt$NoteEditorViewModel : ViewModel</ID>
    <ID>LongMethod:ArticleDetailsScreen.kt$@OptIn(ExperimentalLayoutApi::class) @Composable private fun ArticleContentWithComments( state: ArticleDetailsContract.UiState, detailsEventPublisher: (UiEvent) -&gt; Unit, articleParts: List&lt;ArticlePartRender&gt;, listState: LazyListState = rememberLazyListState(), paddingValues: PaddingValues, onArticleCommentClick: (naddr: String) -&gt; Unit, onArticleHashtagClick: (hashtag: String) -&gt; Unit, onHighlightClick: (String) -&gt; Unit, onZapOptionsClick: () -&gt; Unit, noteCallbacks: NoteCallbacks, onGoToWallet: () -&gt; Unit, onPostAction: ((FeedPostAction) -&gt; Unit)? = null, onPostLongPressAction: ((FeedPostAction) -&gt; Unit)? = null, onUiError: ((UiError) -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:ArticleDetailsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun ArticleDetailsScreen( detailsState: ArticleDetailsContract.UiState, articleState: ArticleContract.UiState, callbacks: ArticleDetailsContract.ScreenCallbacks, detailsEventPublisher: (UiEvent) -&gt; Unit, articleEventPublisher: (ArticleContract.UiEvent) -&gt; Unit, noteCallbacks: NoteCallbacks, )</ID>
    <ID>LongMethod:ArticleFeedList.kt$@ExperimentalMaterial3Api @ExperimentalFoundationApi @Composable private fun ArticleFeedLazyColumn( articleState: ArticleContract.UiState, pagingItems: LazyPagingItems&lt;FeedArticleUi&gt;, listState: LazyListState, showPaywall: Boolean, onArticleClick: (naddr: String) -&gt; Unit, onGetPremiumClick: () -&gt; Unit, articleEventPublisher: (ArticleContract.UiEvent) -&gt; Unit, modifier: Modifier = Modifier, noContentText: String = stringResource(id = R.string.article_feed_no_content), noContentVerticalArrangement: Arrangement.Vertical = Arrangement.Center, noContentPaddingValues: PaddingValues = PaddingValues(all = 0.dp), contentPadding: PaddingValues = PaddingValues(all = 0.dp), header: @Composable (LazyItemScope.() -&gt; Unit)? = null, stickyHeader: @Composable (LazyItemScope.() -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:ChatScreen.kt$@Composable private fun ChatList( messages: LazyPagingItems&lt;ChatMessageUi&gt;, noteCallbacks: NoteCallbacks, modifier: Modifier = Modifier, state: LazyListState = rememberLazyListState(), contentPadding: PaddingValues = PaddingValues(0.dp), )</ID>
    <ID>LongMethod:ChatScreen.kt$@Composable private fun ChatMessageListItem( chatMessage: ChatMessageUi, previousMessage: ChatMessageUi? = null, nextMessage: ChatMessageUi? = null, onUrlClick: (String) -&gt; Unit, noteCallbacks: NoteCallbacks, )</ID>
    <ID>LongMethod:ContentDisplaySettingsScreen.kt$@Composable @ExperimentalMaterial3Api private fun ContentDisplaySettingsScreen( state: ContentDisplaySettingsContract.UiState, onClose: () -&gt; Unit, eventPublisher: (UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:DvmFeedListItem.kt$@Composable private fun DvmFeedListItem( modifier: Modifier = Modifier, dvmFeed: DvmFeedUi, state: DvmFeedListItemContract.UiState, onFeedClick: ((dvmFeed: DvmFeedUi) -&gt; Unit)? = null, onGoToWallet: (() -&gt; Unit)? = null, eventPublisher: (DvmFeedListItemContract.UiEvent) -&gt; Unit, listItemContainerColor: Color = AppTheme.extraColorScheme.surfaceVariantAlt2, clipShape: Shape? = AppTheme.shapes.small, avatarSize: Dp = 48.dp, extended: Boolean = false, showFollowsActionsAvatarRow: Boolean = false, )</ID>
    <ID>LongMethod:EventMediaGalleryScreen.kt$@UnstableApi @ExperimentalFoundationApi @Composable private fun MediaGalleryContent( pagerState: PagerState, initialAttachmentIndex: Int, initialPositionMs: Long, attachments: List&lt;EventUriUi&gt;, pagerIndicatorContainerColor: Color, immersiveMode: ImmersiveModeState?, onCurrentlyVisibleBitmap: ((Bitmap?) -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:ExploreFeedScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun ExploreFeedScreen( state: ExploreFeedContract.UiState, noteCallbacks: NoteCallbacks, callbacks: ExploreFeedContract.ScreenCallbacks, eventPublisher: (ExploreFeedContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:ExploreHomeScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun ExploreHomeScreen( state: ExploreHomeContract.UiState, onPrimaryDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onDrawerDestinationClick: (DrawerScreenDestination) -&gt; Unit, noteCallbacks: NoteCallbacks, accountSwitcherCallbacks: AccountSwitcherCallbacks, callbacks: ExploreHomeContract.ScreenCallbacks, )</ID>
    <ID>LongMethod:FeedList.kt$@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class) @Composable fun FeedList( title: String, feeds: List&lt;FeedUi&gt;, activeFeed: FeedUi?, onFeedClick: (feed: FeedUi) -&gt; Unit, onRestoreDefaultPrimalFeeds: () -&gt; Unit, modifier: Modifier = Modifier, enableEditMode: Boolean = false, isEditMode: Boolean = false, onEditFeedClick: (() -&gt; Unit)? = null, onAddFeedClick: (() -&gt; Unit)? = null, onEditDoneClick: (() -&gt; Unit)? = null, onFeedReordered: ((feeds: List&lt;FeedUi&gt;) -&gt; Unit)? = null, onFeedEnabled: ((feed: FeedUi, enabled: Boolean) -&gt; Unit)? = null, onFeedRemoved: ((feed: FeedUi) -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:FeedListBottomSheet.kt$@ExperimentalMaterial3Api @Composable private fun FeedsBottomSheet( state: FeedListContract.UiState, onFeedClick: (FeedUi) -&gt; Unit, onDismissRequest: () -&gt; Unit, sheetState: SheetState = rememberModalBottomSheetState(), eventPublisher: (FeedListContract.UiEvent) -&gt; Unit, onGoToWallet: (() -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:FeedNoteCard.kt$@Composable private fun FeedNote( data: FeedPostUi, fullWidthContent: Boolean, avatarSizeDp: Dp, avatarPaddingValues: PaddingValues, notePaddingValues: PaddingValues, enableTweetsMode: Boolean, headerSingleLine: Boolean, showReplyTo: Boolean, forceContentIndent: Boolean, expanded: Boolean, textSelectable: Boolean, showNoteStatCounts: Boolean, couldAutoPlay: Boolean, noteCallbacks: NoteCallbacks, nestingCutOffLimit: Int = Int.MAX_VALUE, onPostAction: ((FeedPostAction) -&gt; Unit)? = null, onPostLongClickAction: ((FeedPostAction) -&gt; Unit)? = null, contentFooter: @Composable () -&gt; Unit = {}, onVideoSoundToggle: ((soundOn: Boolean) -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:FeedNoteCard.kt$@ExperimentalMaterial3Api @Composable private fun FeedNoteCard( data: FeedPostUi, state: NoteContract.UiState, eventPublisher: (UiEvent) -&gt; Unit, modifier: Modifier = Modifier, shape: Shape = CardDefaults.shape, colors: CardColors = noteCardColors(), cardPadding: PaddingValues = PaddingValues(all = 0.dp), nestingCutOffLimit: Int = Int.MAX_VALUE, enableTweetsMode: Boolean = false, headerSingleLine: Boolean = true, fullWidthContent: Boolean = false, forceContentIndent: Boolean = false, drawLineAboveAvatar: Boolean = false, drawLineBelowAvatar: Boolean = false, expanded: Boolean = false, textSelectable: Boolean = false, showReplyTo: Boolean = true, noteOptionsMenuEnabled: Boolean = true, showNoteStatCounts: Boolean = true, couldAutoPlay: Boolean = false, noteCallbacks: NoteCallbacks = NoteCallbacks(), onGoToWallet: (() -&gt; Unit)? = null, contentFooter: @Composable () -&gt; Unit = {}, )</ID>
    <ID>LongMethod:HomeFeedScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun HomeFeedScreen( state: HomeFeedContract.UiState, onTopLevelDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onDrawerScreenClick: (DrawerScreenDestination) -&gt; Unit, noteCallbacks: NoteCallbacks, eventPublisher: (UiEvent) -&gt; Unit, accountSwitcherCallbacks: AccountSwitcherCallbacks, callbacks: HomeFeedContract.ScreenCallbacks, )</ID>
    <ID>LongMethod:LegendaryProfileCustomizationScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun LegendaryProfileCustomizationScreen( state: LegendaryProfileCustomizationContract.UiState, eventPublisher: (UiEvent) -&gt; Unit, callbacks: LegendaryProfileCustomizationContract.ScreenCallbacks, )</ID>
    <ID>LongMethod:LiveStreamMiniPlayer.kt$@OptIn(ExperimentalLayoutApi::class, ExperimentalSharedTransitionApi::class) @UnstableApi @Composable fun LiveStreamMiniPlayer( modifier: Modifier = Modifier, exoPlayer: ExoPlayer, offsetX: Animatable&lt;Float, AnimationVector1D&gt;, offsetY: Animatable&lt;Float, AnimationVector1D&gt;, isAtBottom: MutableState&lt;Boolean&gt;, isAtTop: MutableState&lt;Boolean&gt;, state: LiveStreamContract.UiState, onExpandStream: () -&gt; Unit, onStopStream: () -&gt; Unit, sharedTransitionScope: SharedTransitionScope, animatedVisibilityScope: AnimatedVisibilityScope, )</ID>
    <ID>LongMethod:LiveStreamViewModel.kt$LiveStreamViewModel$private fun observeEvents()</ID>
    <ID>LongMethod:MessageConversationListScreen.kt$@Composable private fun ConversationListItem( conversation: MessageConversationUi, onConversationClick: (String) -&gt; Unit, onProfileClick: (profileId: String) -&gt; Unit, )</ID>
    <ID>LongMethod:MessageConversationListScreen.kt$@Composable private fun MessagesTabs( relation: ConversationRelation, onFollowsTabClick: () -&gt; Unit, onOtherTabClick: () -&gt; Unit, onMarkAllRead: () -&gt; Unit, )</ID>
    <ID>LongMethod:MultipleUserPicker.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun MultipleUserPicker( modifier: Modifier = Modifier, sheetTitle: String, placeholderText: String, onDismissRequest: () -&gt; Unit, onUsersSelected: (Set&lt;UserProfileItemUi&gt;) -&gt; Unit, sheetState: SheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true), startingSelectedUsers: Set&lt;UserProfileItemUi&gt;, )</ID>
    <ID>LongMethod:NostrUserText.kt$@Composable fun NostrUserText( displayName: String, internetIdentifier: String?, modifier: Modifier = Modifier, displayNameColor: Color = AppTheme.colorScheme.onSurface, displayNameFontWeight: FontWeight = FontWeight.Bold, fontSize: TextUnit = TextUnit.Unspecified, style: TextStyle = LocalTextStyle.current, autoResizeToFit: Boolean = false, overflow: TextOverflow = if (autoResizeToFit) { TextOverflow.Clip } else { TextOverflow.Ellipsis }, maxLines: Int = 1, internetIdentifierBadgeSize: Dp = 14.dp, internetIdentifierBadgeAlign: PlaceholderVerticalAlign = PlaceholderVerticalAlign.Center, legendaryCustomization: LegendaryCustomization? = null, annotatedStringPrefixBuilder: (AnnotatedString.Builder.() -&gt; Unit)? = null, annotatedStringSuffixBuilder: (AnnotatedString.Builder.() -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:NoteActionsRow.kt$@Composable fun FeedNoteActionsRow( modifier: Modifier, eventStats: EventStatsUi, isBookmarked: Boolean, highlightedNote: Boolean = false, showBookmark: Boolean = false, showCounts: Boolean = true, onPostAction: ((FeedPostAction) -&gt; Unit)? = null, onPostLongPressAction: ((FeedPostAction) -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:NoteContent.kt$@OptIn(ExperimentalFoundationApi::class) @Composable fun NoteContent( modifier: Modifier = Modifier, data: NoteContentUi, expanded: Boolean, noteCallbacks: NoteCallbacks, nestingLevel: Int = 0, nestingCutOffLimit: Int = Int.MAX_VALUE, maxLines: Int = Int.MAX_VALUE, overflow: TextOverflow = TextOverflow.Clip, enableTweetsMode: Boolean = false, textSelectable: Boolean = false, referencedEventsHaveBorder: Boolean = false, couldAutoPlay: Boolean = false, highlightColor: Color = AppTheme.colorScheme.secondary, contentColor: Color = AppTheme.colorScheme.onSurface, referencedEventsContainerColor: Color = AppTheme.extraColorScheme.surfaceVariantAlt1, onClick: ((offset: Offset) -&gt; Unit)? = null, onUrlClick: ((url: String) -&gt; Unit)? = null, onVideoSoundToggle: ((soundOn: Boolean) -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:NoteDropdownMenu.kt$@Composable fun NoteDropdownMenuIcon( modifier: Modifier, noteId: String, noteContent: String, noteRawData: String, authorId: String, isBookmarked: Boolean, isThreadMuted: Boolean, isNoteAuthor: Boolean, relayHints: List&lt;String&gt; = emptyList(), noteGraphicsLayer: GraphicsLayer, enabled: Boolean = true, onBookmarkClick: (() -&gt; Unit)? = null, onMuteUserClick: (() -&gt; Unit)? = null, onMuteThreadClick: (() -&gt; Unit)? = null, onUnmuteThreadClick: (() -&gt; Unit)? = null, onReportContentClick: (() -&gt; Unit)? = null, onRequestDeleteClick: (() -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:NoteEditorScreen.kt$@ExperimentalMaterial3Api @Composable private fun NoteEditorBox( state: NoteEditorContract.UiState, eventPublisher: (UiEvent) -&gt; Unit, modifier: Modifier = Modifier, contentPadding: PaddingValues, noteCallbacks: NoteCallbacks, )</ID>
    <ID>LongMethod:NoteFeedLazyColumn.kt$@ExperimentalMaterial3Api @ExperimentalFoundationApi @Composable fun NoteFeedLazyColumn( modifier: Modifier = Modifier, pagingItems: LazyPagingItems&lt;FeedPostUi&gt;, streamPills: List&lt;StreamPillUi&gt;, listState: LazyListState, showPaywall: Boolean, noteCallbacks: NoteCallbacks, onGoToWallet: () -&gt; Unit, showTopZaps: Boolean = false, shouldShowLoadingState: Boolean = true, shouldShowNoContentState: Boolean = true, showReplyTo: Boolean = true, noContentVerticalArrangement: Arrangement.Vertical = Arrangement.Center, noContentPaddingValues: PaddingValues = PaddingValues(all = 0.dp), noContentText: String = stringResource(id = R.string.feed_no_content), contentPadding: PaddingValues = PaddingValues(all = 0.dp), header: @Composable (LazyItemScope.() -&gt; Unit)? = null, stickyHeader: @Composable (LazyItemScope.() -&gt; Unit)? = null, onUiError: ((UiError) -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:NoteMediaAttachmentsHorizontalPager.kt$@Composable private fun ThreeImageGallery( mediaEventUris: List&lt;EventUriUi&gt;, blossoms: List&lt;String&gt;, imageSizeDp: DpSize, onMediaClick: (MediaClickEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:NotificationListItem.kt$@Composable private fun NotificationType.toSuffixText(usersZappedCount: Int = 0, totalSatsZapped: String? = null): String</ID>
    <ID>LongMethod:NotificationsScreen.kt$@ExperimentalMaterial3Api @Composable private fun NotificationsList( state: NotificationsContract.UiState, noteState: NoteContract.UiState, listState: LazyListState, seenPagingItems: LazyPagingItems&lt;NotificationUi&gt;, paddingValues: PaddingValues, noteCallbacks: NoteCallbacks, onGoToWallet: () -&gt; Unit, onPostLikeClick: (FeedPostUi) -&gt; Unit, onRepostClick: (FeedPostUi) -&gt; Unit, onZapClick: (FeedPostUi, ULong?, String?) -&gt; Unit, onPostQuoteClick: (FeedPostUi) -&gt; Unit, onBookmarkClick: (FeedPostUi) -&gt; Unit, )</ID>
    <ID>LongMethod:NotificationsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun NotificationsScreen( state: NotificationsContract.UiState, noteState: NoteContract.UiState, noteCallbacks: NoteCallbacks, onPrimaryDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onDrawerDestinationClick: (DrawerScreenDestination) -&gt; Unit, noteEventPublisher: (NoteContract.UiEvent) -&gt; Unit, accountSwitcherCallbacks: AccountSwitcherCallbacks, callbacks: NotificationsContract.ScreenCallbacks, )</ID>
    <ID>LongMethod:OnboardingProfileFollowsScreen.kt$@ExperimentalMaterial3Api @Composable fun OnboardingProfileFollowsScreen( state: OnboardingContract.UiState, eventPublisher: (OnboardingContract.UiEvent) -&gt; Unit, onBack: () -&gt; Unit, )</ID>
    <ID>LongMethod:PremiumBuyingScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun PremiumBuyingScreen( state: PremiumBuyingContract.UiState, eventPublisher: (PremiumBuyingContract.UiEvent) -&gt; Unit, screenCallbacks: PremiumBuyingContract.ScreenCallbacks, )</ID>
    <ID>LongMethod:PremiumContactListScreen.kt$@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class) @Composable private fun PremiumContactListScreen( state: PremiumContactListContract.UiState, eventPublisher: (PremiumContactListContract.UiEvent) -&gt; Unit, snackbarHostState: SnackbarHostState, onClose: () -&gt; Unit, )</ID>
    <ID>LongMethod:PremiumContentBackupScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun PremiumContentBackupScreen( state: PremiumContentBackupContract.UiState, eventPublisher: (PremiumContentBackupContract.UiEvent) -&gt; Unit, onClose: () -&gt; Unit, )</ID>
    <ID>LongMethod:PremiumOrderHistoryScreen.kt$@Composable private fun SubscriptionHeader( modifier: Modifier, state: PremiumOrderHistoryContract.UiState, onExtendSubscription: (primalName: String) -&gt; Unit, onCancelSubscription: () -&gt; Unit, )</ID>
    <ID>LongMethod:PremiumOrderHistoryScreen.kt$@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class) @Composable private fun PremiumOrderHistoryScreen( state: PremiumOrderHistoryContract.UiState, eventPublisher: (PremiumOrderHistoryContract.UiEvent) -&gt; Unit, callbacks: PremiumOrderHistoryContract.ScreenCallbacks, )</ID>
    <ID>LongMethod:PremiumPurchaseStage.kt$@ExperimentalMaterial3Api @Composable fun PremiumPurchaseStage( state: PremiumBuyingContract.UiState, onBack: () -&gt; Unit, onLearnMoreClick: (SubscriptionTier) -&gt; Unit, eventPublisher: (PremiumBuyingContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:PrimalAppNavigation.kt$@OptIn(ExperimentalSharedTransitionApi::class) @Composable private fun PrimalAppNavigation( navController: NavHostController, startDestination: String, drawerDestinationHandler: (DrawerScreenDestination) -&gt; Unit, topLevelDestinationHandler: (PrimalTopLevelDestination) -&gt; Unit, )</ID>
    <ID>LongMethod:PrimalDrawerScaffold.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun PrimalDrawerScaffold( modifier: Modifier = Modifier, drawerState: DrawerState, activeDestination: PrimalTopLevelDestination, onPrimaryDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onDrawerDestinationClick: (DrawerScreenDestination) -&gt; Unit, onDrawerQrCodeClick: () -&gt; Unit, badges: Badges = Badges(), onActiveDestinationClick: () -&gt; Unit = {}, topAppBarState: TopAppBarState = remember { TopAppBarState( initialHeightOffsetLimit = -Float.MAX_VALUE, initialHeightOffset = 0f, initialContentOffset = 0f, ) }, topAppBar: @Composable (TopAppBarScrollBehavior?) -&gt; Unit = {}, content: @Composable (PaddingValues) -&gt; Unit = {}, floatingNewDataHost: @Composable () -&gt; Unit = {}, floatingActionButton: @Composable () -&gt; Unit = {}, snackbarHost: @Composable () -&gt; Unit = {}, drawerOpenGestureEnabled: Boolean = true, focusModeEnabled: Boolean = true, accountSwitcherCallbacks: AccountSwitcherCallbacks, )</ID>
    <ID>LongMethod:PrimalNavigationBar.kt$@Composable fun PrimalNavigationBarLightningBolt( modifier: Modifier = Modifier, activeDestination: PrimalTopLevelDestination, onTopLevelDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onActiveDestinationClick: (() -&gt; Unit)? = null, badges: Badges = Badges(), )</ID>
    <ID>LongMethod:ReactionsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun ReactionsScreen(state: ReactionsContract.UiState, callbacks: ReactionsContract.ScreenCallbacks)</ID>
    <ID>LongMethod:ReadsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun ReadsScreen( state: ReadsScreenContract.UiState, onTopLevelDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onDrawerScreenClick: (DrawerScreenDestination) -&gt; Unit, eventPublisher: (ReadsScreenContract.UiEvent) -&gt; Unit, accountSwitcherCallbacks: AccountSwitcherCallbacks, callbacks: ReadsScreenContract.ScreenCallbacks, )</ID>
    <ID>LongMethod:ReceivePaymentScreen.kt$@Composable private fun ReceivePaymentViewer( paddingValues: PaddingValues, state: UiState, onBuyPremium: () -&gt; Unit, onCopyClick: () -&gt; Unit, onEditClick: () -&gt; Unit, )</ID>
    <ID>LongMethod:ReceivePaymentScreen.kt$@ExperimentalComposeUiApi @Composable private fun ReceivePaymentEditor( paddingValues: PaddingValues, paymentDetails: PaymentDetails, currencyMode: CurrencyMode, currentExchangeRate: Double?, maximumUsdAmount: BigDecimal?, applying: Boolean, onApplyChanges: (String, String, String?) -&gt; Unit, onCancel: () -&gt; Unit, )</ID>
    <ID>LongMethod:RedeemCodeScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun RedeemCodeScreen( state: RedeemCodeContract.UiState, callbacks: RedeemCodeContract.ScreenCallbacks, eventPublisher: (RedeemCodeContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:SearchScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun SearchScreen( state: SearchContract.UiState, searchScope: SearchScope, eventPublisher: (SearchContract.UiEvent) -&gt; Unit, callbacks: SearchContract.ScreenCallbacks, )</ID>
    <ID>LongMethod:SendPaymentScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun SendPaymentScreen( state: SendPaymentContract.UiState, eventPublisher: (SendPaymentContract.UiEvent) -&gt; Unit, onClose: () -&gt; Unit, )</ID>
    <ID>LongMethod:ThreadScreen.kt$@OptIn(ExperimentalLayoutApi::class, ExperimentalMaterial3Api::class) @Composable private fun ThreadLazyColumn( modifier: Modifier, state: ThreadContract.UiState, noteCallbacks: NoteCallbacks, onRootPostDeleted: () -&gt; Unit, onGoToWallet: (() -&gt; Unit), paddingValues: PaddingValues = PaddingValues(all = 0.dp), onUiError: ((UiError) -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:ThreadScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun ThreadScreen( state: ThreadContract.UiState, callbacks: ThreadContract.ScreenCallbacks, noteCallbacks: NoteCallbacks, eventPublisher: (ThreadContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:TransactionEditor.kt$@Composable private fun TransactionHeaderColumn( modifier: Modifier, uiMode: UiDensityMode, state: CreateTransactionContract.UiState, keyboardVisible: Boolean, onAmountClick: () -&gt; Unit, )</ID>
    <ID>LongMethod:TransactionEditor.kt$@ExperimentalMaterial3Api @ExperimentalComposeUiApi @Composable fun TransactionEditor( modifier: Modifier, state: CreateTransactionContract.UiState, paddingValues: PaddingValues, eventPublisher: (CreateTransactionContract.UiEvent) -&gt; Unit, onCancelClick: () -&gt; Unit, )</ID>
    <ID>LongMethod:WalletDashboardScreen.kt$@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class) @Composable fun WalletDashboardScreen( state: WalletDashboardContract.UiState, onPrimaryDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onDrawerDestinationClick: (DrawerScreenDestination) -&gt; Unit, onDrawerQrCodeClick: () -&gt; Unit, onWalletActivateClick: () -&gt; Unit, onProfileClick: (String) -&gt; Unit, onTransactionClick: (String) -&gt; Unit, onSendClick: () -&gt; Unit, onScanClick: () -&gt; Unit, onReceiveClick: () -&gt; Unit, eventPublisher: (UiEvent) -&gt; Unit, accountSwitcherCallbacks: AccountSwitcherCallbacks, )</ID>
    <ID>LongParameterList:ArticleDetailsViewModel.kt$ArticleDetailsViewModel$( private val savedStateHandle: SavedStateHandle, private val activeAccountStore: ActiveAccountStore, private val articleRepository: ArticleRepository, private val feedRepository: FeedRepository, private val highlightRepository: HighlightRepository, private val profileRepository: ProfileRepository, private val profileFollowsHandler: ProfileFollowsHandler, private val eventInteractionRepository: EventInteractionRepository, private val zapHandler: ZapHandler, private val walletAccountRepository: WalletAccountRepository, )</ID>
    <ID>LongParameterList:ArticleViewModel.kt$ArticleViewModel$( private val activeAccountStore: ActiveAccountStore, private val articleRepository: ArticleRepository, private val profileRepository: ProfileRepository, private val mutedItemRepository: MutedItemRepository, private val bookmarksRepository: PublicBookmarksRepository, private val relayHintsRepository: EventRelayHintsRepository, private val eventInteractionRepository: EventInteractionRepository, )</ID>
    <ID>LongParameterList:ContentAppearance.kt$ContentAppearance$( val noteBodyFontSize: TextUnit, val noteBodyLineHeight: TextUnit, val noteUsernameSize: TextUnit, val noteAvatarSize: Dp, val articleTextFontSize: TextUnit, val articleTextLineHeight: TextUnit, val tweetFontSize: TextUnit, val tweetLineHeight: TextUnit, )</ID>
    <ID>LongParameterList:CreateAccountHandler.kt$CreateAccountHandler$( private val dispatchers: DispatcherProvider, private val credentialsStore: CredentialsStore, private val eventsSignatureHandler: NostrEventSignatureHandler, private val authRepository: AuthRepository, private val relayRepository: RelayRepository, private val blossomRepository: BlossomRepository, private val userRepository: UserRepository, private val settingsRepository: SettingsRepository, private val walletAccountRepository: WalletAccountRepository, )</ID>
    <ID>LongParameterList:CreateTransactionViewModel.kt$CreateTransactionViewModel$( savedStateHandle: SavedStateHandle, private val dispatchers: DispatcherProvider, private val activeUserStore: ActiveAccountStore, private val profileRepository: ProfileRepository, private val transactionFeeRepository: TransactionFeeRepository, private val walletRepository: WalletRepository, private val walletAccountRepository: WalletAccountRepository, private val txRequestBuilder: TxRequestBuilder, private val walletTextParser: WalletTextParser, private val exchangeRateHandler: ExchangeRateHandler, )</ID>
    <ID>LongParameterList:HomeFeedViewModel.kt$HomeFeedViewModel$( savedStateHandle: SavedStateHandle, private val dispatcherProvider: DispatcherProvider, private val activeAccountStore: ActiveAccountStore, private val appConfigHandler: AppConfigHandler, private val subscriptionsManager: SubscriptionsManager, private val feedsRepository: FeedsRepository, private val profileRepository: ProfileRepository, private val userDataSyncerFactory: UserDataUpdaterFactory, )</ID>
    <ID>LongParameterList:LegendContributeViewModel.kt$LegendContributeViewModel$( private val activeAccountStore: ActiveAccountStore, private val exchangeRateHandler: ExchangeRateHandler, private val premiumRepository: PremiumRepository, private val walletRepository: WalletRepository, private val walletAccountRepository: WalletAccountRepository, private val transactionFeeRepository: TransactionFeeRepository, private val purchaseMonitor: PurchaseMonitor, )</ID>
    <ID>LongParameterList:LiveStreamViewModel.kt$LiveStreamViewModel$( userMentionHandlerFactory: UserMentionHandler.Factory, @Assisted val streamNaddr: Naddr, private val userRepository: UserRepository, private val profileRepository: ProfileRepository, private val streamRepository: StreamRepository, private val liveStreamChatRepository: LiveStreamChatRepository, private val activeAccountStore: ActiveAccountStore, private val profileFollowsHandler: ProfileFollowsHandler, private val zapHandler: ZapHandler, private val walletAccountRepository: WalletAccountRepository, private val mutedItemRepository: MutedItemRepository, private val eventInteractionRepository: EventInteractionRepository, private val relayHintsRepository: EventRelayHintsRepository, )</ID>
    <ID>LongParameterList:LoginHandler.kt$LoginHandler$( private val settingsRepository: SettingsRepository, private val authRepository: AuthRepository, private val userRepository: UserRepository, private val mutedItemRepository: MutedItemRepository, private val bookmarksRepository: PublicBookmarksRepository, private val walletAccountRepository: WalletAccountRepository, private val dispatchers: DispatcherProvider, private val credentialsStore: CredentialsStore, private val nostrNotary: NostrNotary, )</ID>
    <ID>LongParameterList:NoteEditorViewModel.kt$NoteEditorViewModel$( userMentionHandlerFactory: UserMentionHandler.Factory, @Assisted private val args: NoteEditorArgs, private val fileAnalyser: FileAnalyser, private val activeAccountStore: ActiveAccountStore, private val feedRepository: FeedRepository, private val notePublishHandler: NotePublishHandler, private val primalUploadService: AndroidPrimalBlossomUploadService, private val highlightRepository: HighlightRepository, private val streamRepository: StreamRepository, private val articleRepository: ArticleRepository, private val relayHintsRepository: EventRelayHintsRepository, private val eventRepository: EventRepository, )</ID>
    <ID>LongParameterList:NoteViewModel.kt$NoteViewModel$( @Assisted private val noteId: String?, private val activeAccountStore: ActiveAccountStore, private val zapHandler: ZapHandler, private val eventInteractionRepository: EventInteractionRepository, private val profileRepository: ProfileRepository, private val feedRepository: FeedRepository, private val mutedItemRepository: MutedItemRepository, private val bookmarksRepository: PublicBookmarksRepository, private val relayHintsRepository: EventRelayHintsRepository, private val userRepository: UserRepository, private val walletAccountRepository: WalletAccountRepository, )</ID>
    <ID>LongParameterList:PrimalAppNavigation.kt$( route: String, arguments: List&lt;NamedNavArgument&gt;, deepLinks: List&lt;NavDeepLink&gt;, navController: NavController, onTopLevelDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onDrawerScreenClick: (DrawerScreenDestination) -&gt; Unit, )</ID>
    <ID>LongParameterList:ProfileDetailsViewModel.kt$ProfileDetailsViewModel$( private val savedStateHandle: SavedStateHandle, private val dispatcherProvider: DispatcherProvider, private val activeAccountStore: ActiveAccountStore, private val feedsRepository: FeedsRepository, private val profileRepository: ProfileRepository, private val userRepository: UserRepository, private val mutedItemRepository: MutedItemRepository, private val zapHandler: ZapHandler, private val profileFollowsHandler: ProfileFollowsHandler, private val streamRepository: StreamRepository, private val walletAccountRepository: WalletAccountRepository, )</ID>
    <ID>LongParameterList:TransactionDetailsViewModel.kt$TransactionDetailsViewModel$( savedStateHandle: SavedStateHandle, private val dispatcherProvider: DispatcherProvider, private val activeAccountStore: ActiveAccountStore, private val walletRepository: WalletRepository, private val feedRepository: FeedRepository, private val articleRepository: ArticleRepository, private val exchangeRateHandler: ExchangeRateHandler, )</ID>
    <ID>LongParameterList:UserDataUpdater.kt$UserDataUpdater$( @Assisted val userId: String, private val activeAccountStore: ActiveAccountStore, private val settingsRepository: SettingsRepository, private val userRepository: UserRepository, private val walletAccountRepository: WalletAccountRepository, private val walletRepository: WalletRepository, private val relayRepository: RelayRepository, private val bookmarksRepository: PublicBookmarksRepository, private val premiumRepository: PremiumRepository, private val mutedItemRepository: MutedItemRepository, private val nostrNotary: NostrNotary, private val pushNotificationsTokenUpdater: PushNotificationsTokenUpdater, )</ID>
    <ID>LongParameterList:UserRepository.kt$UserRepository$( private val usersDatabase: UsersDatabase, private val dispatchers: DispatcherProvider, private val accountsStore: UserAccountsStore, private val credentialsStore: CredentialsStore, private val activeAccountStore: ActiveAccountStore, private val primalUploadService: AndroidPrimalBlossomUploadService, private val usersApi: UsersApi, private val nostrPublisher: NostrPublisher, private val profileRepository: ProfileRepository, private val userDataCleanupRepository: UserDataCleanupRepository, private val cachingImportRepository: CachingImportRepository, private val walletRepository: WalletRepository, private val streamRepository: StreamRepository, )</ID>
    <ID>LongParameterList:WalletDashboardViewModel.kt$WalletDashboardViewModel$( userRepository: UserRepository, private val activeAccountStore: ActiveAccountStore, private val walletAccountRepository: WalletAccountRepository, private val walletRepository: WalletRepository, private val primalBillingClient: PrimalBillingClient, private val billingRepository: BillingRepository, private val subscriptionsManager: SubscriptionsManager, private val exchangeRateHandler: ExchangeRateHandler, )</ID>
    <ID>MagicNumber:PrimalDrawer.kt$0.5f</ID>
    <ID>MagicNumber:PrimalDrawerScaffold.kt$0.5f</ID>
    <ID>MatchingDeclarationName:__PrimalIcons.kt$PrimalIcons</ID>
    <ID>ReturnCount:LiveStreamViewModel.kt$LiveStreamViewModel$private fun zapStream(zapAction: UiEvent.ZapStream)</ID>
    <ID>ReturnCount:NumberUtils.kt$@Suppress("MagicNumber", "ImplicitDefaultLocale") fun Long.shortened(): String</ID>
    <ID>TooManyFunctions:NostrNotary.kt$NostrNotary : NostrEventSignatureHandler</ID>
    <ID>TooManyFunctions:PremiumApi.kt$PremiumApi</ID>
    <ID>TooManyFunctions:PremiumApiImpl.kt$PremiumApiImpl : PremiumApi</ID>
    <ID>TooManyFunctions:PremiumRepository.kt$PremiumRepository</ID>
    <ID>TooManyFunctions:PrimalAppNavigation.kt$net.primal.android.navigation.PrimalAppNavigation.kt</ID>
    <ID>TooManyFunctions:UserRepository.kt$UserRepository</ID>
  </CurrentIssues>
</SmellBaseline>
