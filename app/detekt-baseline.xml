<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>CyclomaticComplexMethod:ChatScreen.kt$@Composable private fun ChatMessageListItem( chatMessage: ChatMessageUi, previousMessage: ChatMessageUi? = null, nextMessage: ChatMessageUi? = null, onProfileClick: (String) -&gt; Unit, onNoteClick: (String) -&gt; Unit, onUrlClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:CreateAccountViewModel.kt$CreateAccountViewModel$private fun observeEvents()</ID>
    <ID>CyclomaticComplexMethod:CreateTransactionScreen.kt$@ExperimentalComposeUiApi @ExperimentalMaterial3Api @Composable fun CreateTransactionScreen( state: CreateTransactionContract.UiState, eventPublisher: (CreateTransactionContract.UiEvent) -&gt; Unit, onClose: () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:FeedLazyColumn.kt$@ExperimentalMaterial3Api @ExperimentalFoundationApi @Composable fun FeedLazyColumn( pagingItems: LazyPagingItems&lt;FeedPostUi&gt;, contentPadding: PaddingValues, listState: LazyListState, zappingState: ZappingState, onPostClick: (String) -&gt; Unit, onProfileClick: (String) -&gt; Unit, onPostLikeClick: (FeedPostUi) -&gt; Unit, onRepostClick: (FeedPostUi) -&gt; Unit, onZapClick: (FeedPostUi, ULong?, String?) -&gt; Unit, onPostReplyClick: (String) -&gt; Unit, onPostQuoteClick: (FeedPostUi) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onGoToWallet: () -&gt; Unit, onMuteClick: ((String) -&gt; Unit)? = null, shouldShowLoadingState: Boolean = true, shouldShowNoContentState: Boolean = true, showReplyTo: Boolean = true, header: @Composable (LazyItemScope.() -&gt; Unit)? = null, stickyHeader: @Composable (LazyItemScope.() -&gt; Unit)? = null, )</ID>
    <ID>CyclomaticComplexMethod:FeedRemoteMediator.kt$FeedRemoteMediator$override suspend fun load(loadType: LoadType, state: PagingState&lt;Int, FeedPost&gt;): MediatorResult</ID>
    <ID>CyclomaticComplexMethod:MessagesRemoteMediator.kt$MessagesRemoteMediator$override suspend fun load(loadType: LoadType, state: PagingState&lt;Int, DirectMessage&gt;): MediatorResult</ID>
    <ID>CyclomaticComplexMethod:NoteEditorScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun NoteEditorScreen( state: NoteEditorContract.UiState, onClose: () -&gt; Unit, eventPublisher: (UiEvent) -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:NotificationEvents.kt$private fun ContentPrimalNotification.parseActionPostId(type: NotificationType): String?</ID>
    <ID>CyclomaticComplexMethod:NotificationEvents.kt$private fun ContentPrimalNotification.parseActionUserId(type: NotificationType): String?</ID>
    <ID>CyclomaticComplexMethod:NotificationListItem.kt$@Composable private fun NotificationListItem( notifications: List&lt;NotificationUi&gt;, imagePainter: Painter, suffixText: String, onProfileClick: (String) -&gt; Unit, onPostClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onPostAction: (FeedPostAction) -&gt; Unit, onPostLongPressAction: (FeedPostAction) -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:NotificationListItem.kt$@Composable private fun NotificationType.toSuffixText(usersZappedCount: Int = 0, totalSatsZapped: String? = null): String</ID>
    <ID>CyclomaticComplexMethod:NotificationTypePainter.kt$@Composable fun NotificationType.toImagePainter(): Painter</ID>
    <ID>CyclomaticComplexMethod:NotificationsRemoteMediator.kt$NotificationsRemoteMediator$override suspend fun load(loadType: LoadType, state: PagingState&lt;Int, Notification&gt;): MediatorResult</ID>
    <ID>CyclomaticComplexMethod:NotificationsScreen.kt$@ExperimentalMaterial3Api @Composable private fun NotificationsList( state: NotificationsContract.UiState, listState: LazyListState, seenPagingItems: LazyPagingItems&lt;NotificationUi&gt;, paddingValues: PaddingValues, onProfileClick: (String) -&gt; Unit, onNoteClick: (String) -&gt; Unit, onNoteReplyClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onGoToWallet: () -&gt; Unit, onPostLikeClick: (FeedPostUi) -&gt; Unit, onRepostClick: (FeedPostUi) -&gt; Unit, onZapClick: (FeedPostUi, ULong?, String?) -&gt; Unit, onPostQuoteClick: (FeedPostUi) -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:NotificationsSettingsScreen.kt$@Composable private fun NotificationType.toTitle(): String</ID>
    <ID>CyclomaticComplexMethod:ProfileDetailsScreen.kt$@Composable private fun ErrorHandler(error: ProfileError?, snackbarHostState: SnackbarHostState)</ID>
    <ID>CyclomaticComplexMethod:ProfileDetailsScreen.kt$@Suppress("MagicNumber") @OptIn(ExperimentalFoundationApi::class, ExperimentalMaterial3Api::class) @Composable fun ProfileDetailsScreen( state: ProfileDetailsContract.UiState, onClose: () -&gt; Unit, onPostClick: (String) -&gt; Unit, onPostReplyClick: (String) -&gt; Unit, onPostQuoteClick: (String) -&gt; Unit, onProfileClick: (String) -&gt; Unit, onEditProfileClick: () -&gt; Unit, onMessageClick: (String) -&gt; Unit, onZapProfileClick: (DraftTx) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onGoToWallet: () -&gt; Unit, onFollowsClick: (String, ProfileFollowsType) -&gt; Unit, eventPublisher: (ProfileDetailsContract.UiEvent) -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:ThreadScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun ThreadScreen( state: ThreadContract.UiState, onClose: () -&gt; Unit, onPostClick: (String) -&gt; Unit, onPostReplyClick: (String) -&gt; Unit, onPostQuoteClick: (String) -&gt; Unit, onProfileClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onGoToWallet: () -&gt; Unit, onReplyInNoteEditor: (String, Uri?, String) -&gt; Unit, eventPublisher: (ThreadContract.UiEvent) -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:TransactionEditor.kt$@Composable private fun TransactionHeaderColumn( modifier: Modifier, uiMode: UiDensityMode, state: CreateTransactionContract.UiState, keyboardVisible: Boolean, onAmountClick: () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:WalletDashboardScreen.kt$@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class) @Composable fun WalletDashboardScreen( state: WalletDashboardContract.UiState, onPrimaryDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onDrawerDestinationClick: (DrawerScreenDestination) -&gt; Unit, onWalletActivateClick: () -&gt; Unit, onProfileClick: (String) -&gt; Unit, onTransactionClick: (String) -&gt; Unit, onSendClick: () -&gt; Unit, onScanClick: () -&gt; Unit, onReceiveClick: () -&gt; Unit, eventPublisher: (UiEvent) -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:WalletTransactionsMediator.kt$WalletTransactionsMediator$override suspend fun load(loadType: LoadType, state: PagingState&lt;Int, WalletTransaction&gt;): MediatorResult</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:PrimalDrawer.kt$val (avatarRef, usernameRef, iconRef, identifierRef, statsRef) = createRefs()</ID>
    <ID>EmptyFunctionBlock:PostStatsUpdaterTest.kt$PostStatsUpdaterTest${ }</ID>
    <ID>EmptyFunctionBlock:ProfileRepositoryTest.kt$ProfileRepositoryTest${ }</ID>
    <ID>ForEachOnRange:ConversionUtils.kt$0..3</ID>
    <ID>ImplicitDefaultLocale:IntUtils.kt$String.format("%.1f", total)</ID>
    <ID>LongMethod:AccountSettingsScreen.kt$@Composable fun PrivateKeySection(nsec: String)</ID>
    <ID>LongMethod:AppearanceSettingsScreen.kt$@Composable private fun ThemeBox( primalTheme: PrimalTheme, state: AppearanceSettingsContract.UiState, eventPublisher: (AppearanceSettingsContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:ChatScreen.kt$@Composable private fun ChatList( messages: LazyPagingItems&lt;ChatMessageUi&gt;, modifier: Modifier = Modifier, state: LazyListState = rememberLazyListState(), contentPadding: PaddingValues = PaddingValues(0.dp), onProfileClick: (String) -&gt; Unit, onNoteClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, )</ID>
    <ID>LongMethod:ChatScreen.kt$@Composable private fun ChatMessageListItem( chatMessage: ChatMessageUi, previousMessage: ChatMessageUi? = null, nextMessage: ChatMessageUi? = null, onProfileClick: (String) -&gt; Unit, onNoteClick: (String) -&gt; Unit, onUrlClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, )</ID>
    <ID>LongMethod:EditProfileScreen.kt$@OptIn(ExperimentalComposeUiApi::class) @Composable fun EditProfileContent( state: EditProfileContract.UiState, eventPublisher: (EditProfileContract.UiEvent) -&gt; Unit, paddingValues: PaddingValues, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:ExploreFeedScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun ExploreFeedScreen( state: ExploreFeedContract.UiState, onClose: () -&gt; Unit, onPostClick: (String) -&gt; Unit, onPostReplyClick: (String) -&gt; Unit, onPostQuoteClick: (String) -&gt; Unit, onProfileClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onGoToWallet: () -&gt; Unit, eventPublisher: (ExploreFeedContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:ExploreHomeScreen.kt$@OptIn(ExperimentalMaterial3Api::class, ExperimentalLayoutApi::class) @Composable fun ExploreHomeScreen( state: ExploreHomeContract.UiState, onHashtagClick: (String) -&gt; Unit, onSearchClick: () -&gt; Unit, onPrimaryDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onDrawerDestinationClick: (DrawerScreenDestination) -&gt; Unit, eventPublisher: (UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:FeedLazyColumn.kt$@ExperimentalMaterial3Api @ExperimentalFoundationApi @Composable fun FeedLazyColumn( pagingItems: LazyPagingItems&lt;FeedPostUi&gt;, contentPadding: PaddingValues, listState: LazyListState, zappingState: ZappingState, onPostClick: (String) -&gt; Unit, onProfileClick: (String) -&gt; Unit, onPostLikeClick: (FeedPostUi) -&gt; Unit, onRepostClick: (FeedPostUi) -&gt; Unit, onZapClick: (FeedPostUi, ULong?, String?) -&gt; Unit, onPostReplyClick: (String) -&gt; Unit, onPostQuoteClick: (FeedPostUi) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onGoToWallet: () -&gt; Unit, onMuteClick: ((String) -&gt; Unit)? = null, shouldShowLoadingState: Boolean = true, shouldShowNoContentState: Boolean = true, showReplyTo: Boolean = true, header: @Composable (LazyItemScope.() -&gt; Unit)? = null, stickyHeader: @Composable (LazyItemScope.() -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:FeedRemoteMediator.kt$FeedRemoteMediator$override suspend fun load(loadType: LoadType, state: PagingState&lt;Int, FeedPost&gt;): MediatorResult</ID>
    <ID>LongMethod:FeedScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun FeedScreen( state: FeedContract.UiState, eventPublisher: (FeedContract.UiEvent) -&gt; Unit, onFeedsClick: () -&gt; Unit, onNewPostClick: (String?) -&gt; Unit, onPostClick: (String) -&gt; Unit, onPostReplyClick: (String) -&gt; Unit, onProfileClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onGoToWallet: () -&gt; Unit, onPrimaryDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onDrawerDestinationClick: (DrawerScreenDestination) -&gt; Unit, )</ID>
    <ID>LongMethod:FeedsSettingsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun FeedsSettingsScreen( state: FeedsSettingsContract.UiState, eventPublisher: (FeedsSettingsContract.UiEvent) -&gt; Unit, onClose: () -&gt; Unit, )</ID>
    <ID>LongMethod:FollowRecommendedAccountsStep.kt$@OptIn(ExperimentalFoundationApi::class) @Composable fun FollowRecommendedAccountsStep( state: CreateAccountContract.UiState, eventPublisher: (CreateAccountContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:MessageConversationListScreen.kt$@Composable private fun MessagesTabs( relation: ConversationRelation, onFollowsTabClick: () -&gt; Unit, onOtherTabClick: () -&gt; Unit, onMarkAllRead: () -&gt; Unit, )</ID>
    <ID>LongMethod:NoteDropdownMenu.kt$@Composable fun NoteDropdownMenuIcon( modifier: Modifier, noteId: String, noteContent: String, noteRawData: String, authorId: String, onMuteUserClick: () -&gt; Unit, )</ID>
    <ID>LongMethod:NoteEditorScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun NoteEditorScreen( state: NoteEditorContract.UiState, onClose: () -&gt; Unit, eventPublisher: (UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:NotificationListItem.kt$@Composable private fun NotificationListItem( notifications: List&lt;NotificationUi&gt;, imagePainter: Painter, suffixText: String, onProfileClick: (String) -&gt; Unit, onPostClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onPostAction: (FeedPostAction) -&gt; Unit, onPostLongPressAction: (FeedPostAction) -&gt; Unit, )</ID>
    <ID>LongMethod:NotificationListItem.kt$@Composable private fun NotificationType.toSuffixText(usersZappedCount: Int = 0, totalSatsZapped: String? = null): String</ID>
    <ID>LongMethod:NotificationsScreen.kt$@ExperimentalMaterial3Api @Composable private fun NotificationsList( state: NotificationsContract.UiState, listState: LazyListState, seenPagingItems: LazyPagingItems&lt;NotificationUi&gt;, paddingValues: PaddingValues, onProfileClick: (String) -&gt; Unit, onNoteClick: (String) -&gt; Unit, onNoteReplyClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onGoToWallet: () -&gt; Unit, onPostLikeClick: (FeedPostUi) -&gt; Unit, onRepostClick: (FeedPostUi) -&gt; Unit, onZapClick: (FeedPostUi, ULong?, String?) -&gt; Unit, onPostQuoteClick: (FeedPostUi) -&gt; Unit, )</ID>
    <ID>LongMethod:NotificationsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun NotificationsScreen( state: NotificationsContract.UiState, onProfileClick: (String) -&gt; Unit, onNoteClick: (String) -&gt; Unit, onNoteReplyClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onGoToWallet: () -&gt; Unit, onPostQuoteClick: (String) -&gt; Unit, onNotificationSettings: () -&gt; Unit, onPrimaryDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onDrawerDestinationClick: (DrawerScreenDestination) -&gt; Unit, eventPublisher: (NotificationsContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:PrimalAppNavigation.kt$@OptIn(ExperimentalMaterialNavigationApi::class) @Composable fun PrimalAppNavigation()</ID>
    <ID>LongMethod:PrimalDrawer.kt$@Composable private fun DrawerHeader(userAccount: UserAccount?)</ID>
    <ID>LongMethod:PrimalDrawerScaffold.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun PrimalDrawerScaffold( drawerState: DrawerState, activeDestination: PrimalTopLevelDestination, onPrimaryDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onDrawerDestinationClick: (DrawerScreenDestination) -&gt; Unit, badges: Badges = Badges(), onActiveDestinationClick: () -&gt; Unit = {}, topBar: @Composable (TopAppBarScrollBehavior?) -&gt; Unit = {}, content: @Composable (PaddingValues) -&gt; Unit = {}, floatingNewDataHost: @Composable () -&gt; Unit = {}, floatingActionButton: @Composable () -&gt; Unit = {}, snackbarHost: @Composable () -&gt; Unit = {}, focusModeEnabled: Boolean = true, )</ID>
    <ID>LongMethod:PrimalNavigationBar.kt$@Composable fun PrimalNavigationBarLightningBolt( modifier: Modifier = Modifier, activeDestination: PrimalTopLevelDestination, onTopLevelDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onActiveDestinationClick: (() -&gt; Unit)? = null, badges: Badges = Badges(), )</ID>
    <ID>LongMethod:ProfileDetailsScreen.kt$@Composable private fun ProfileDropdownMenu( profileId: String, isActiveUser: Boolean, isProfileMuted: Boolean, isProfileFeedInActiveUserFeeds: Boolean, snackbarHostState: SnackbarHostState, uiScope: CoroutineScope, name: String, eventPublisher: (ProfileDetailsContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:ProfileDetailsScreen.kt$@Composable private fun UserProfileDetails( state: ProfileDetailsContract.UiState, eventPublisher: (ProfileDetailsContract.UiEvent) -&gt; Unit, onEditProfileClick: () -&gt; Unit, onZapProfileClick: () -&gt; Unit, onMessageClick: () -&gt; Unit, onFollow: () -&gt; Unit, onUnfollow: () -&gt; Unit, onFollowsClick: (String, ProfileFollowsType) -&gt; Unit, )</ID>
    <ID>LongMethod:ProfileDetailsScreen.kt$@Suppress("MagicNumber") @OptIn(ExperimentalFoundationApi::class, ExperimentalMaterial3Api::class) @Composable fun ProfileDetailsScreen( state: ProfileDetailsContract.UiState, onClose: () -&gt; Unit, onPostClick: (String) -&gt; Unit, onPostReplyClick: (String) -&gt; Unit, onPostQuoteClick: (String) -&gt; Unit, onProfileClick: (String) -&gt; Unit, onEditProfileClick: () -&gt; Unit, onMessageClick: (String) -&gt; Unit, onZapProfileClick: (DraftTx) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onGoToWallet: () -&gt; Unit, onFollowsClick: (String, ProfileFollowsType) -&gt; Unit, eventPublisher: (ProfileDetailsContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:ProfileHero.kt$@Composable fun ProfileHero( bannerUri: Uri?, avatarUri: Uri?, onBannerUriChange: (Uri?) -&gt; Unit, onAvatarUriChange: (Uri?) -&gt; Unit, )</ID>
    <ID>LongMethod:ProfilePreviewStep.kt$@Composable fun ProfilePreviewStep(state: CreateAccountContract.UiState, isFinalized: Boolean)</ID>
    <ID>LongMethod:ReceivePaymentScreen.kt$@ExperimentalComposeUiApi @Composable private fun ReceivePaymentEditor( paddingValues: PaddingValues, paymentDetails: PaymentDetails, applying: Boolean, onApplyChanges: (String, String?) -&gt; Unit, onCancel: () -&gt; Unit, )</ID>
    <ID>LongMethod:SendPaymentScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun SendPaymentScreen( state: SendPaymentContract.UiState, eventPublisher: (SendPaymentContract.UiEvent) -&gt; Unit, onClose: () -&gt; Unit, )</ID>
    <ID>LongMethod:ThreadScreen.kt$@OptIn(ExperimentalComposeUiApi::class) @Composable fun ReplyToBottomBar( modifier: Modifier, publishingReply: Boolean, replyToAuthorName: String, replyToAuthorHandle: String, replyTextProvider: () -&gt; String, onPublishReplyClick: () -&gt; Unit, onReplyUpdated: (String) -&gt; Unit, onPhotoImported: (Uri) -&gt; Unit, onExpand: () -&gt; Unit, )</ID>
    <ID>LongMethod:ThreadScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun ThreadScreen( state: ThreadContract.UiState, onClose: () -&gt; Unit, onPostClick: (String) -&gt; Unit, onPostReplyClick: (String) -&gt; Unit, onPostQuoteClick: (String) -&gt; Unit, onProfileClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onGoToWallet: () -&gt; Unit, onReplyInNoteEditor: (String, Uri?, String) -&gt; Unit, eventPublisher: (ThreadContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:TransactionEditor.kt$@Composable private fun TransactionHeaderColumn( modifier: Modifier, uiMode: UiDensityMode, state: CreateTransactionContract.UiState, keyboardVisible: Boolean, onAmountClick: () -&gt; Unit, )</ID>
    <ID>LongMethod:TransactionEditor.kt$@ExperimentalMaterial3Api @ExperimentalComposeUiApi @Composable fun TransactionEditor( modifier: Modifier, state: CreateTransactionContract.UiState, paddingValues: PaddingValues, eventPublisher: (CreateTransactionContract.UiEvent) -&gt; Unit, onCancelClick: () -&gt; Unit, )</ID>
    <ID>LongMethod:WalletActivationScreen.kt$@ExperimentalComposeUiApi @Composable private fun WalletCodeActivationInput( modifier: Modifier = Modifier, working: Boolean, error: Throwable?, email: String, onCodeChanged: () -&gt; Unit, onCodeConfirmation: (String) -&gt; Unit, isKeyboardVisible: Boolean, )</ID>
    <ID>LongMethod:WalletActivationScreen.kt$@ExperimentalMaterial3Api @ExperimentalComposeUiApi @Composable fun WalletActivationScreen( uiState: WalletActivationContract.UiState, eventPublisher: (UiEvent) -&gt; Unit, onClose: () -&gt; Unit, )</ID>
    <ID>LongMethod:WalletActivationScreen.kt$@Suppress("MagicNumber") @OptIn(ExperimentalMaterial3Api::class) @ExperimentalComposeUiApi @Composable private fun WalletActivationDataInput( modifier: Modifier = Modifier, data: WalletActivationData, working: Boolean, error: Throwable?, onErrorDismiss: () -&gt; Unit, onDataChanged: (WalletActivationData) -&gt; Unit, onActivationCodeRequest: (WalletActivationData) -&gt; Unit, )</ID>
    <ID>LongMethod:WalletDashboardScreen.kt$@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class) @Composable fun WalletDashboardScreen( state: WalletDashboardContract.UiState, onPrimaryDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onDrawerDestinationClick: (DrawerScreenDestination) -&gt; Unit, onWalletActivateClick: () -&gt; Unit, onProfileClick: (String) -&gt; Unit, onTransactionClick: (String) -&gt; Unit, onSendClick: () -&gt; Unit, onScanClick: () -&gt; Unit, onReceiveClick: () -&gt; Unit, eventPublisher: (UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:WalletSettingsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun WalletSettingsScreen( state: WalletSettingsContract.UiState, onClose: () -&gt; Unit, onEditProfileClick: () -&gt; Unit, eventPublisher: (UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:WelcomeScreen.kt$@Composable fun WelcomeScreen(onSignInClick: () -&gt; Unit, onCreateAccountClick: () -&gt; Unit)</ID>
    <ID>LongMethod:ZapSettingsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun ZapSettingsScreen( uiState: ZapSettingsContract.UiState, onClose: () -&gt; Unit, eventPublisher: (ZapSettingsContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongParameterList:CreateAccountViewModel.kt$CreateAccountViewModel$( private val dispatcherProvider: CoroutineDispatcherProvider, private val authRepository: AuthRepository, private val settingsRepository: SettingsRepository, private val profileRepository: ProfileRepository, private val userRepository: UserRepository, private val recommendedFollowsApi: RecommendedFollowsApi, private val relayRepository: RelayRepository, )</ID>
    <ID>LongParameterList:ExploreFeedViewModel.kt$ExploreFeedViewModel$( savedStateHandle: SavedStateHandle, private val dispatcherProvider: CoroutineDispatcherProvider, private val activeAccountStore: ActiveAccountStore, private val feedRepository: FeedRepository, private val postRepository: PostRepository, private val profileRepository: ProfileRepository, private val zapHandler: ZapHandler, private val settingsRepository: SettingsRepository, private val mutedUserRepository: MutedUserRepository, )</ID>
    <ID>LongParameterList:ExtraColorScheme.kt$( onBrand: Color, surfaceVariantAlt1: Color, surfaceVariantAlt2: Color, surfaceVariantAlt3: Color, onSurfaceVariantAlt1: Color, onSurfaceVariantAlt2: Color, onSurfaceVariantAlt3: Color, onSurfaceVariantAlt4: Color, warning: Color, successBright: Color, successDim: Color, replied: Color, zapped: Color, liked: Color, reposted: Color, )</ID>
    <ID>LongParameterList:ExtraColorScheme.kt$ExtraColorScheme$( onBrand: Color = this.onBrand, surfaceVariantAlt1: Color = this.surfaceVariantAlt1, surfaceVariantAlt2: Color = this.surfaceVariantAlt2, surfaceVariantAlt3: Color = this.surfaceVariantAlt3, onSurfaceVariantAlt1: Color = this.onSurfaceVariantAlt1, onSurfaceVariantAlt2: Color = this.onSurfaceVariantAlt2, onSurfaceVariantAlt3: Color = this.onSurfaceVariantAlt3, onSurfaceVariantAlt4: Color = this.onSurfaceVariantAlt4, warning: Color = this.warning, successBright: Color = this.successBright, successDim: Color = this.successDim, replied: Color = this.replied, zapped: Color = this.zapped, liked: Color = this.liked, reposted: Color = this.reposted, )</ID>
    <ID>LongParameterList:ExtraColorScheme.kt$ExtraColorScheme$( onBrand: Color, surfaceVariantAlt1: Color, surfaceVariantAlt2: Color, surfaceVariantAlt3: Color, onSurfaceVariantAlt1: Color, onSurfaceVariantAlt2: Color, onSurfaceVariantAlt3: Color, onSurfaceVariantAlt4: Color, warning: Color, successBright: Color, successDim: Color, replied: Color, zapped: Color, liked: Color, reposted: Color, )</ID>
    <ID>LongParameterList:FeedViewModel.kt$FeedViewModel$( savedStateHandle: SavedStateHandle, private val dispatcherProvider: CoroutineDispatcherProvider, private val feedRepository: FeedRepository, private val postRepository: PostRepository, private val activeAccountStore: ActiveAccountStore, private val userDataSyncerFactory: UserDataUpdaterFactory, private val appConfigUpdater: AppConfigUpdater, private val profileRepository: ProfileRepository, private val zapHandler: ZapHandler, private val subscriptionsManager: SubscriptionsManager, private val mutedUserRepository: MutedUserRepository, )</ID>
    <ID>LongParameterList:NotificationsViewModel.kt$NotificationsViewModel$( private val dispatcherProvider: CoroutineDispatcherProvider, private val activeAccountStore: ActiveAccountStore, private val notificationsRepository: NotificationRepository, private val postRepository: PostRepository, private val profileRepository: ProfileRepository, private val zapHandler: ZapHandler, private val subscriptionsManager: SubscriptionsManager, )</ID>
    <ID>LongParameterList:ProfileDetailsViewModel.kt$ProfileDetailsViewModel$( savedStateHandle: SavedStateHandle, private val dispatcherProvider: CoroutineDispatcherProvider, private val activeAccountStore: ActiveAccountStore, private val feedRepository: FeedRepository, private val profileRepository: ProfileRepository, private val postRepository: PostRepository, private val zapHandler: ZapHandler, private val settingsRepository: SettingsRepository, private val mutedUserRepository: MutedUserRepository, )</ID>
    <ID>LongParameterList:SubscriptionsManager.kt$SubscriptionsManager$( dispatcherProvider: CoroutineDispatcherProvider, private val activeAccountStore: ActiveAccountStore, private val userRepository: UserRepository, private val nostrNotary: NostrNotary, private val appConfigProvider: AppConfigProvider, @PrimalCacheApiClient private val cacheApiClient: PrimalApiClient, @PrimalWalletApiClient private val walletApiClient: PrimalApiClient, )</ID>
    <ID>LongParameterList:ThreadViewModel.kt$ThreadViewModel$( savedStateHandle: SavedStateHandle, private val dispatcherProvider: CoroutineDispatcherProvider, private val activeAccountStore: ActiveAccountStore, private val feedRepository: FeedRepository, private val postRepository: PostRepository, private val profileRepository: ProfileRepository, private val zapHandler: ZapHandler, private val mutedUserRepository: MutedUserRepository, )</ID>
    <ID>MagicNumber:AvatarThumbnailsRow.kt$0xFF111111</ID>
    <ID>MagicNumber:AvatarThumbnailsRow.kt$0xFFC8C8C8</ID>
    <ID>MagicNumber:AvatarThumbnailsRow.kt$99</ID>
    <ID>MagicNumber:CameraQrCodeDetector.kt$0.45f</ID>
    <ID>MagicNumber:CameraQrCodeDetector.kt$0.55f</ID>
    <ID>MagicNumber:CameraQrCodeDetector.kt$0.7f</ID>
    <ID>MagicNumber:ChatScreen.kt$0.25f</ID>
    <ID>MagicNumber:ConversionUtils.kt$0xFFFF</ID>
    <ID>MagicNumber:ConversionUtils.kt$3</ID>
    <ID>MagicNumber:ConversionUtils.kt$4</ID>
    <ID>MagicNumber:ConversionUtils.kt$8</ID>
    <ID>MagicNumber:CreateAccountContract.kt$CreateAccountContract.UiState.CreateAccountStep.ACCOUNT_CREATED$3</ID>
    <ID>MagicNumber:CreateAccountContract.kt$CreateAccountContract.UiState.CreateAccountStep.FOLLOW_RECOMMENDED_ACCOUNTS$4</ID>
    <ID>MagicNumber:ExploreHomeViewModel.kt$ExploreHomeViewModel$3</ID>
    <ID>MagicNumber:Fading.kt$0.99f</ID>
    <ID>MagicNumber:FeedNoteList.kt$100</ID>
    <ID>MagicNumber:FeedNoteList.kt$30</ID>
    <ID>MagicNumber:FeedNoteList.kt$5</ID>
    <ID>MagicNumber:FeedViewModel.kt$FeedViewModel$3</ID>
    <ID>MagicNumber:IntUtils.kt$10</ID>
    <ID>MagicNumber:IntUtils.kt$1000</ID>
    <ID>MagicNumber:IntUtils.kt$1000.0</ID>
    <ID>MagicNumber:IntUtils.kt$1000000.0</ID>
    <ID>MagicNumber:IntUtils.kt$1000000000.0</ID>
    <ID>MagicNumber:ListNoContent.kt$500L</ID>
    <ID>MagicNumber:Nip19TLV.kt$Nip19TLV$4</ID>
    <ID>MagicNumber:Nip19TLV.kt$Nip19TLV.Type.KIND$3</ID>
    <ID>MagicNumber:NostrIncomingMessageParser.kt$3</ID>
    <ID>MagicNumber:NostrResources.kt$3</ID>
    <ID>MagicNumber:NostrWalletConnectParser.kt$64</ID>
    <ID>MagicNumber:NotificationsSettingsScreen.kt$0.75f</ID>
    <ID>MagicNumber:PrimalDrawer.kt$0.5f</ID>
    <ID>MagicNumber:PrimalDrawerScaffold.kt$0.5f</ID>
    <ID>MagicNumber:PrimalDrawerScaffold.kt$45f</ID>
    <ID>MagicNumber:ProfilePreviewStep.kt$0xFF181818</ID>
    <ID>MagicNumber:QrCodeAnalyzer.kt$QrCodeAnalyzer$3</ID>
    <ID>MagicNumber:ReceivePaymentScreen.kt$220</ID>
    <ID>MagicNumber:ReceivePaymentScreen.kt$90</ID>
    <ID>MagicNumber:ReferencedNoteCard.kt$30</ID>
    <ID>MagicNumber:SendPaymentTabScan.kt$100L</ID>
    <ID>MagicNumber:ThreadScreen.kt$3600</ID>
    <ID>MagicNumber:ThreadViewModel.kt$ThreadViewModel$100</ID>
    <ID>MagicNumber:Timestamps.kt$24</ID>
    <ID>MagicNumber:Timestamps.kt$30</ID>
    <ID>MagicNumber:Timestamps.kt$365</ID>
    <ID>MagicNumber:Timestamps.kt$60</ID>
    <ID>MagicNumber:Timestamps.kt$7</ID>
    <ID>MagicNumber:ValidationUtils.kt$32</ID>
    <ID>MagicNumber:WalletDashboardScreen.kt$0.42f</ID>
    <ID>MatchingDeclarationName:__PrimalIcons.kt$PrimalIcons</ID>
    <ID>NestedBlockDepth:FeedRemoteMediator.kt$FeedRemoteMediator$override suspend fun load(loadType: LoadType, state: PagingState&lt;Int, FeedPost&gt;): MediatorResult</ID>
    <ID>ReturnCount:FeedRemoteMediator.kt$FeedRemoteMediator$override suspend fun load(loadType: LoadType, state: PagingState&lt;Int, FeedPost&gt;): MediatorResult</ID>
    <ID>ReturnCount:IntUtils.kt$fun Long.shortened(): String</ID>
    <ID>ReturnCount:LnInvoiceUtils.kt$LnInvoiceUtils$private fun getAmount(invoice: String): BigDecimal</ID>
    <ID>ReturnCount:MessagesRemoteMediator.kt$MessagesRemoteMediator$override suspend fun load(loadType: LoadType, state: PagingState&lt;Int, DirectMessage&gt;): MediatorResult</ID>
    <ID>ReturnCount:NostrResources.kt$private fun String.nostrUriToBytes(): ByteArray?</ID>
    <ID>ReturnCount:NotificationEvents.kt$fun ContentPrimalNotification.asNotificationPOOrNull(): NotificationData?</ID>
    <ID>ReturnCount:NotificationsRemoteMediator.kt$NotificationsRemoteMediator$override suspend fun load(loadType: LoadType, state: PagingState&lt;Int, Notification&gt;): MediatorResult</ID>
    <ID>ReturnCount:WalletTransactionsMediator.kt$WalletTransactionsMediator$override suspend fun load(loadType: LoadType, state: PagingState&lt;Int, WalletTransaction&gt;): MediatorResult</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:ExploreFeedViewModel.kt$ExploreFeedViewModel$IllegalStateException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:FeedViewModel.kt$FeedViewModel$IllegalStateException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:NotificationsViewModel.kt$NotificationsViewModel$IllegalStateException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:ThreadViewModel.kt$ThreadViewModel$IllegalStateException()</ID>
    <ID>ThrowsCount:FileUploader.kt$FileUploader$@Throws(UnsuccessfulFileUpload::class) suspend fun uploadFile(userId: String, uri: Uri): String</ID>
    <ID>ThrowsCount:LnInvoiceUtils.kt$LnInvoiceUtils$private fun decodeUnlimitedLength(invoice: String): Boolean</ID>
    <ID>TooGenericExceptionCaught:NostrIncomingMessageParser.kt$error: Exception</ID>
    <ID>TooManyFunctions:ConversionUtils.kt$net.primal.android.crypto.ConversionUtils.kt</ID>
    <ID>TooManyFunctions:NostrNotary.kt$NostrNotary</ID>
    <ID>TooManyFunctions:NostrResources.kt$net.primal.android.nostr.ext.NostrResources.kt</ID>
    <ID>TooManyFunctions:Tags.kt$net.primal.android.nostr.ext.Tags.kt</ID>
    <ID>TooManyFunctions:UserRepository.kt$UserRepository</ID>
    <ID>TooManyFunctions:WalletApi.kt$WalletApi</ID>
    <ID>TooManyFunctions:WalletApiImpl.kt$WalletApiImpl : WalletApi</ID>
    <ID>TooManyFunctions:WalletRepository.kt$WalletRepository</ID>
    <ID>TopLevelPropertyNaming:__PrimalIcons.kt$private var __PrimalIcons: ____KtList&lt;ImageVector&gt;? = null</ID>
    <ID>UnusedPrivateProperty:LnInvoiceUtils.kt$LnInvoiceUtils$/** The Bech32 character set for encoding. */ private const val CHARSET = "qpzry9x8gf2tvdw0s3jn54khce6mua7l"</ID>
    <ID>UnusedPrivateProperty:UnsuccessfulFileUpload.kt$UnsuccessfulFileUpload$cause: Throwable?</ID>
    <ID>UseCheckOrError:RelayPool.kt$RelayPool$throw IllegalStateException("$it is not allowed")</ID>
    <ID>UseRequire:ConversionUtils.kt$throw IllegalArgumentException("Expected $it but obtained ${decodedForm.first}")</ID>
  </CurrentIssues>
</SmellBaseline>
