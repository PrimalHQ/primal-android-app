<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ComplexCondition:NostrResources.kt$isNote() || isNoteUri() || isNEventUri() || isNEvent()</ID>
    <ID>CyclomaticComplexMethod:ArticleDetailsScreen.kt$@OptIn(ExperimentalLayoutApi::class) @Composable private fun ArticleContentWithComments( state: ArticleDetailsContract.UiState, articleParts: List&lt;ArticlePartRender&gt;, listState: LazyListState = rememberLazyListState(), showHighlights: Boolean, paddingValues: PaddingValues, onArticleCommentClick: (naddr: String) -&gt; Unit, onArticleHashtagClick: (hashtag: String) -&gt; Unit, onZapOptionsClick: () -&gt; Unit, onHighlightClick: (String) -&gt; Unit, noteCallbacks: NoteCallbacks, onGoToWallet: () -&gt; Unit, onPostAction: ((FeedPostAction) -&gt; Unit)? = null, onPostLongPressAction: ((FeedPostAction) -&gt; Unit)? = null, onFollowUnfollowClick: (() -&gt; Unit)? = null, onUiError: ((UiError) -&gt; Unit)? = null, )</ID>
    <ID>CyclomaticComplexMethod:ArticleDetailsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun ArticleDetailsScreen( detailsState: ArticleDetailsContract.UiState, articleState: ArticleContract.UiState, detailsEventPublisher: (UiEvent) -&gt; Unit, articleEventPublisher: (ArticleContract.UiEvent) -&gt; Unit, onArticleHashtagClick: (hashtag: String) -&gt; Unit, noteCallbacks: NoteCallbacks, onGoToWallet: () -&gt; Unit, onClose: () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:ChatScreen.kt$@Composable private fun ChatMessageListItem( chatMessage: ChatMessageUi, previousMessage: ChatMessageUi? = null, nextMessage: ChatMessageUi? = null, onUrlClick: (String) -&gt; Unit, noteCallbacks: NoteCallbacks, )</ID>
    <ID>CyclomaticComplexMethod:CreateTransactionScreen.kt$@ExperimentalComposeUiApi @ExperimentalMaterial3Api @Composable fun CreateTransactionScreen( state: CreateTransactionContract.UiState, eventPublisher: (CreateTransactionContract.UiEvent) -&gt; Unit, onClose: () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:DvmFeedListItem.kt$@Composable private fun DvmFeedListItem( modifier: Modifier = Modifier, dvmFeed: DvmFeedUi, state: DvmFeedListItemContract.UiState, onFeedClick: ((dvmFeed: DvmFeedUi) -&gt; Unit)? = null, onGoToWallet: (() -&gt; Unit)? = null, eventPublisher: (DvmFeedListItemContract.UiEvent) -&gt; Unit, listItemContainerColor: Color = AppTheme.extraColorScheme.surfaceVariantAlt2, clipShape: Shape? = AppTheme.shapes.small, avatarSize: Dp = 48.dp, extended: Boolean = false, showFollowsActionsAvatarRow: Boolean = false, )</ID>
    <ID>CyclomaticComplexMethod:FeedListBottomSheet.kt$@ExperimentalMaterial3Api @Composable private fun FeedsBottomSheet( state: FeedListContract.UiState, onFeedClick: (FeedUi) -&gt; Unit, onDismissRequest: () -&gt; Unit, sheetState: SheetState = rememberModalBottomSheetState(), eventPublisher: (FeedListContract.UiEvent) -&gt; Unit, onGoToWallet: (() -&gt; Unit)? = null, )</ID>
    <ID>CyclomaticComplexMethod:FeedListViewModel.kt$FeedListViewModel$private fun observeEvents()</ID>
    <ID>CyclomaticComplexMethod:FeedNoteCard.kt$@Composable private fun FeedNote( data: FeedPostUi, fullWidthContent: Boolean, avatarSizeDp: Dp, avatarPaddingValues: PaddingValues, notePaddingValues: PaddingValues, enableTweetsMode: Boolean, headerSingleLine: Boolean, showReplyTo: Boolean, forceContentIndent: Boolean, expanded: Boolean, textSelectable: Boolean, showNoteStatCounts: Boolean, noteCallbacks: NoteCallbacks, onPostAction: ((FeedPostAction) -&gt; Unit)? = null, onPostLongClickAction: ((FeedPostAction) -&gt; Unit)? = null, contentFooter: @Composable () -&gt; Unit = {}, )</ID>
    <ID>CyclomaticComplexMethod:FeedNoteCard.kt$@ExperimentalMaterial3Api @Composable private fun FeedNoteCard( data: FeedPostUi, state: NoteContract.UiState, eventPublisher: (UiEvent) -&gt; Unit, modifier: Modifier = Modifier, shape: Shape = CardDefaults.shape, colors: CardColors = noteCardColors(), cardPadding: PaddingValues = PaddingValues(all = 0.dp), enableTweetsMode: Boolean = false, headerSingleLine: Boolean = true, fullWidthContent: Boolean = false, forceContentIndent: Boolean = false, drawLineAboveAvatar: Boolean = false, drawLineBelowAvatar: Boolean = false, expanded: Boolean = false, textSelectable: Boolean = false, showReplyTo: Boolean = true, noteOptionsMenuEnabled: Boolean = true, showNoteStatCounts: Boolean = true, noteCallbacks: NoteCallbacks = NoteCallbacks(), onGoToWallet: (() -&gt; Unit)? = null, contentFooter: @Composable () -&gt; Unit = {}, )</ID>
    <ID>CyclomaticComplexMethod:MessagesRemoteMediator.kt$MessagesRemoteMediator$override suspend fun load(loadType: LoadType, state: PagingState&lt;Int, DirectMessage&gt;): MediatorResult</ID>
    <ID>CyclomaticComplexMethod:NostrUserText.kt$@Composable fun NostrUserText( displayName: String, internetIdentifier: String?, modifier: Modifier = Modifier, displayNameColor: Color = AppTheme.colorScheme.onSurface, fontSize: TextUnit = TextUnit.Unspecified, style: TextStyle = LocalTextStyle.current, overflow: TextOverflow = TextOverflow.Ellipsis, maxLines: Int = 1, internetIdentifierBadgeSize: Dp = 14.dp, internetIdentifierBadgeAlign: PlaceholderVerticalAlign = PlaceholderVerticalAlign.Center, customBadgeStyle: LegendaryStyle? = null, annotatedStringPrefixBuilder: (AnnotatedString.Builder.() -&gt; Unit)? = null, annotatedStringSuffixBuilder: (AnnotatedString.Builder.() -&gt; Unit)? = null, )</ID>
    <ID>CyclomaticComplexMethod:NoteActionsRow.kt$@Composable fun FeedNoteActionsRow( modifier: Modifier, eventStats: EventStatsUi, isBookmarked: Boolean, highlightedNote: Boolean = false, showBookmark: Boolean = false, showCounts: Boolean = true, onPostAction: ((FeedPostAction) -&gt; Unit)? = null, onPostLongPressAction: ((FeedPostAction) -&gt; Unit)? = null, )</ID>
    <ID>CyclomaticComplexMethod:NoteContent.kt$@OptIn(ExperimentalFoundationApi::class) @Composable fun NoteContent( modifier: Modifier = Modifier, data: NoteContentUi, expanded: Boolean, noteCallbacks: NoteCallbacks, maxLines: Int = Int.MAX_VALUE, overflow: TextOverflow = TextOverflow.Clip, enableTweetsMode: Boolean = false, textSelectable: Boolean = false, referencedEventsHaveBorder: Boolean = false, highlightColor: Color = AppTheme.colorScheme.secondary, contentColor: Color = AppTheme.colorScheme.onSurface, referencedEventsContainerColor: Color = AppTheme.extraColorScheme.surfaceVariantAlt1, onClick: ((offset: Offset) -&gt; Unit)? = null, onUrlClick: ((url: String) -&gt; Unit)? = null, )</ID>
    <ID>CyclomaticComplexMethod:NoteFeedLazyColumn.kt$@ExperimentalMaterial3Api @ExperimentalFoundationApi @Composable fun NoteFeedLazyColumn( modifier: Modifier = Modifier, pagingItems: LazyPagingItems&lt;FeedPostUi&gt;, listState: LazyListState, showPaywall: Boolean, noteCallbacks: NoteCallbacks, onGoToWallet: () -&gt; Unit, showTopZaps: Boolean = false, shouldShowLoadingState: Boolean = true, shouldShowNoContentState: Boolean = true, showReplyTo: Boolean = true, noContentVerticalArrangement: Arrangement.Vertical = Arrangement.Center, noContentPaddingValues: PaddingValues = PaddingValues(all = 0.dp), noContentText: String = stringResource(id = R.string.feed_no_content), contentPadding: PaddingValues = PaddingValues(all = 0.dp), header: @Composable (LazyItemScope.() -&gt; Unit)? = null, stickyHeader: @Composable (LazyItemScope.() -&gt; Unit)? = null, onUiError: ((UiError) -&gt; Unit)? = null, )</ID>
    <ID>CyclomaticComplexMethod:NotePublishHandler.kt$NotePublishHandler$@Throws(NostrPublishException::class) suspend fun publishShortTextNote( userId: String, content: String, attachments: List&lt;NoteAttachment&gt; = emptyList(), rootArticleEventId: String? = null, rootArticleId: String? = null, rootArticleAuthorId: String? = null, rootPostId: String? = null, replyToPostId: String? = null, replyToAuthorId: String? = null, ): Boolean</ID>
    <ID>CyclomaticComplexMethod:NotificationEvents.kt$private fun ContentPrimalNotification.parseActionPostId(type: NotificationType): String?</ID>
    <ID>CyclomaticComplexMethod:NotificationEvents.kt$private fun ContentPrimalNotification.parseActionUserId(type: NotificationType): String?</ID>
    <ID>CyclomaticComplexMethod:NotificationListItem.kt$@Composable private fun NotificationType.toSuffixText(usersZappedCount: Int = 0, totalSatsZapped: String? = null): String</ID>
    <ID>CyclomaticComplexMethod:NotificationTypePainter.kt$@Composable fun NotificationType.toImagePainter(): Painter</ID>
    <ID>CyclomaticComplexMethod:NotificationsRemoteMediator.kt$NotificationsRemoteMediator$override suspend fun load(loadType: LoadType, state: PagingState&lt;Int, Notification&gt;): MediatorResult</ID>
    <ID>CyclomaticComplexMethod:NotificationsScreen.kt$@ExperimentalMaterial3Api @Composable private fun NotificationsList( state: NotificationsContract.UiState, noteState: NoteContract.UiState, listState: LazyListState, seenPagingItems: LazyPagingItems&lt;NotificationUi&gt;, paddingValues: PaddingValues, noteCallbacks: NoteCallbacks, onGoToWallet: () -&gt; Unit, onPostLikeClick: (FeedPostUi) -&gt; Unit, onRepostClick: (FeedPostUi) -&gt; Unit, onZapClick: (FeedPostUi, ULong?, String?) -&gt; Unit, onPostQuoteClick: (FeedPostUi) -&gt; Unit, onBookmarkClick: (FeedPostUi) -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:NotificationsSettingsScreen.kt$@Composable private fun NotificationType.toTitle(): String</ID>
    <ID>CyclomaticComplexMethod:OnboardingViewModel.kt$OnboardingViewModel$private fun observeEvents()</ID>
    <ID>CyclomaticComplexMethod:PremiumOrderHistoryScreen.kt$@Composable private fun SubscriptionHeader( modifier: Modifier, state: PremiumOrderHistoryContract.UiState, onExtendSubscription: (primalName: String) -&gt; Unit, onCancelSubscription: () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:PrimalAppNavigation.kt$@OptIn(ExperimentalSharedTransitionApi::class) @Composable fun SharedTransitionScope.PrimalAppNavigation()</ID>
    <ID>CyclomaticComplexMethod:ReceivePaymentScreen.kt$@Composable private fun ReceivePaymentViewer( paddingValues: PaddingValues, state: UiState, onBuyPremium: () -&gt; Unit, onCopyClick: () -&gt; Unit, onEditClick: () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:TransactionEditor.kt$@Composable private fun TransactionHeaderColumn( modifier: Modifier, uiMode: UiDensityMode, state: CreateTransactionContract.UiState, keyboardVisible: Boolean, onAmountClick: () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:WalletDashboardScreen.kt$@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class) @Composable fun WalletDashboardScreen( state: WalletDashboardContract.UiState, onPrimaryDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onDrawerDestinationClick: (DrawerScreenDestination) -&gt; Unit, onDrawerQrCodeClick: () -&gt; Unit, onWalletActivateClick: () -&gt; Unit, onProfileClick: (String) -&gt; Unit, onTransactionClick: (String) -&gt; Unit, onSendClick: () -&gt; Unit, onScanClick: () -&gt; Unit, onReceiveClick: () -&gt; Unit, eventPublisher: (UiEvent) -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:WalletTransactionsMediator.kt$WalletTransactionsMediator$override suspend fun load(loadType: LoadType, state: PagingState&lt;Int, WalletTransaction&gt;): MediatorResult</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:PrimalDrawer.kt$val (avatarRef, usernameRef, iconRef, identifierRef, statsRef) = createRefs()</ID>
    <ID>LongMethod:ArticleDetailsScreen.kt$@OptIn(ExperimentalLayoutApi::class) @Composable private fun ArticleContentWithComments( state: ArticleDetailsContract.UiState, articleParts: List&lt;ArticlePartRender&gt;, listState: LazyListState = rememberLazyListState(), showHighlights: Boolean, paddingValues: PaddingValues, onArticleCommentClick: (naddr: String) -&gt; Unit, onArticleHashtagClick: (hashtag: String) -&gt; Unit, onZapOptionsClick: () -&gt; Unit, onHighlightClick: (String) -&gt; Unit, noteCallbacks: NoteCallbacks, onGoToWallet: () -&gt; Unit, onPostAction: ((FeedPostAction) -&gt; Unit)? = null, onPostLongPressAction: ((FeedPostAction) -&gt; Unit)? = null, onFollowUnfollowClick: (() -&gt; Unit)? = null, onUiError: ((UiError) -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:ArticleDetailsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun ArticleDetailsScreen( detailsState: ArticleDetailsContract.UiState, articleState: ArticleContract.UiState, detailsEventPublisher: (UiEvent) -&gt; Unit, articleEventPublisher: (ArticleContract.UiEvent) -&gt; Unit, onArticleHashtagClick: (hashtag: String) -&gt; Unit, noteCallbacks: NoteCallbacks, onGoToWallet: () -&gt; Unit, onClose: () -&gt; Unit, )</ID>
    <ID>LongMethod:ArticleDropdownMenu.kt$@ExperimentalMaterial3Api @Composable fun ArticleDropdownMenuIcon( modifier: Modifier, articleId: String, articleContent: String?, articleRawData: String?, authorId: String, isBookmarked: Boolean, enabled: Boolean = true, showHighlights: Boolean? = null, onToggleHighlightsClick: (() -&gt; Unit)? = null, onBookmarkClick: (() -&gt; Unit)? = null, onMuteUserClick: (() -&gt; Unit)? = null, onReportContentClick: ((reportType: ReportType) -&gt; Unit)? = null, icon: @Composable () -&gt; Unit, )</ID>
    <ID>LongMethod:ArticleFeedList.kt$@ExperimentalMaterial3Api @ExperimentalFoundationApi @Composable private fun ArticleFeedLazyColumn( articleState: ArticleContract.UiState, pagingItems: LazyPagingItems&lt;FeedArticleUi&gt;, listState: LazyListState, showPaywall: Boolean, onArticleClick: (naddr: String) -&gt; Unit, onGetPremiumClick: () -&gt; Unit, articleEventPublisher: (ArticleContract.UiEvent) -&gt; Unit, modifier: Modifier = Modifier, noContentText: String = stringResource(id = R.string.article_feed_no_content), noContentVerticalArrangement: Arrangement.Vertical = Arrangement.Center, noContentPaddingValues: PaddingValues = PaddingValues(all = 0.dp), contentPadding: PaddingValues = PaddingValues(all = 0.dp), header: @Composable (LazyItemScope.() -&gt; Unit)? = null, stickyHeader: @Composable (LazyItemScope.() -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:ChatScreen.kt$@Composable private fun ChatList( messages: LazyPagingItems&lt;ChatMessageUi&gt;, noteCallbacks: NoteCallbacks, modifier: Modifier = Modifier, state: LazyListState = rememberLazyListState(), contentPadding: PaddingValues = PaddingValues(0.dp), )</ID>
    <ID>LongMethod:ChatScreen.kt$@Composable private fun ChatMessageListItem( chatMessage: ChatMessageUi, previousMessage: ChatMessageUi? = null, nextMessage: ChatMessageUi? = null, onUrlClick: (String) -&gt; Unit, noteCallbacks: NoteCallbacks, )</ID>
    <ID>LongMethod:ContentDisplaySettingsScreen.kt$@Composable @ExperimentalMaterial3Api private fun ContentDisplaySettingsScreen( state: ContentDisplaySettingsContract.UiState, onClose: () -&gt; Unit, eventPublisher: (UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:DvmFeedListItem.kt$@Composable private fun DvmFeedListItem( modifier: Modifier = Modifier, dvmFeed: DvmFeedUi, state: DvmFeedListItemContract.UiState, onFeedClick: ((dvmFeed: DvmFeedUi) -&gt; Unit)? = null, onGoToWallet: (() -&gt; Unit)? = null, eventPublisher: (DvmFeedListItemContract.UiEvent) -&gt; Unit, listItemContainerColor: Color = AppTheme.extraColorScheme.surfaceVariantAlt2, clipShape: Shape? = AppTheme.shapes.small, avatarSize: Dp = 48.dp, extended: Boolean = false, showFollowsActionsAvatarRow: Boolean = false, )</ID>
    <ID>LongMethod:ExploreFeedScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun ExploreFeedScreen( state: ExploreFeedContract.UiState, onClose: () -&gt; Unit, noteCallbacks: NoteCallbacks, onGoToWallet: () -&gt; Unit, eventPublisher: (ExploreFeedContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:ExploreHomeScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun ExploreHomeScreen( state: ExploreHomeContract.UiState, onPrimaryDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onDrawerDestinationClick: (DrawerScreenDestination) -&gt; Unit, onDrawerQrCodeClick: () -&gt; Unit, onSearchClick: () -&gt; Unit, onAdvancedSearchClick: () -&gt; Unit, noteCallbacks: NoteCallbacks, onGoToWallet: (() -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:FeaturesTabContent.kt$@Composable fun FeaturesTabContent(modifier: Modifier = Modifier, contentPadding: PaddingValues)</ID>
    <ID>LongMethod:FeedList.kt$@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class) @Composable fun FeedList( title: String, feeds: List&lt;FeedUi&gt;, activeFeed: FeedUi?, onFeedClick: (feed: FeedUi) -&gt; Unit, onRestoreDefaultPrimalFeeds: () -&gt; Unit, modifier: Modifier = Modifier, enableEditMode: Boolean = false, isEditMode: Boolean = false, onEditFeedClick: (() -&gt; Unit)? = null, onAddFeedClick: (() -&gt; Unit)? = null, onEditDoneClick: (() -&gt; Unit)? = null, onFeedReordered: ((feeds: List&lt;FeedUi&gt;) -&gt; Unit)? = null, onFeedEnabled: ((feed: FeedUi, enabled: Boolean) -&gt; Unit)? = null, onFeedRemoved: ((feed: FeedUi) -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:FeedListBottomSheet.kt$@ExperimentalMaterial3Api @Composable private fun FeedsBottomSheet( state: FeedListContract.UiState, onFeedClick: (FeedUi) -&gt; Unit, onDismissRequest: () -&gt; Unit, sheetState: SheetState = rememberModalBottomSheetState(), eventPublisher: (FeedListContract.UiEvent) -&gt; Unit, onGoToWallet: (() -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:FeedNoteCard.kt$@Composable private fun FeedNote( data: FeedPostUi, fullWidthContent: Boolean, avatarSizeDp: Dp, avatarPaddingValues: PaddingValues, notePaddingValues: PaddingValues, enableTweetsMode: Boolean, headerSingleLine: Boolean, showReplyTo: Boolean, forceContentIndent: Boolean, expanded: Boolean, textSelectable: Boolean, showNoteStatCounts: Boolean, noteCallbacks: NoteCallbacks, onPostAction: ((FeedPostAction) -&gt; Unit)? = null, onPostLongClickAction: ((FeedPostAction) -&gt; Unit)? = null, contentFooter: @Composable () -&gt; Unit = {}, )</ID>
    <ID>LongMethod:FeedNoteCard.kt$@ExperimentalMaterial3Api @Composable private fun FeedNoteCard( data: FeedPostUi, state: NoteContract.UiState, eventPublisher: (UiEvent) -&gt; Unit, modifier: Modifier = Modifier, shape: Shape = CardDefaults.shape, colors: CardColors = noteCardColors(), cardPadding: PaddingValues = PaddingValues(all = 0.dp), enableTweetsMode: Boolean = false, headerSingleLine: Boolean = true, fullWidthContent: Boolean = false, forceContentIndent: Boolean = false, drawLineAboveAvatar: Boolean = false, drawLineBelowAvatar: Boolean = false, expanded: Boolean = false, textSelectable: Boolean = false, showReplyTo: Boolean = true, noteOptionsMenuEnabled: Boolean = true, showNoteStatCounts: Boolean = true, noteCallbacks: NoteCallbacks = NoteCallbacks(), onGoToWallet: (() -&gt; Unit)? = null, contentFooter: @Composable () -&gt; Unit = {}, )</ID>
    <ID>LongMethod:HomeFeedScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun HomeFeedScreen( state: HomeFeedContract.UiState, onTopLevelDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onDrawerScreenClick: (DrawerScreenDestination) -&gt; Unit, onDrawerQrCodeClick: () -&gt; Unit, onSearchClick: () -&gt; Unit, noteCallbacks: NoteCallbacks, onGoToWallet: () -&gt; Unit, onNewPostClick: (content: TextFieldValue?) -&gt; Unit, eventPublisher: (UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:KeysSettingsScreen.kt$@Composable fun PrivateKeySection(nsec: String)</ID>
    <ID>LongMethod:LegendaryProfileCustomizationScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun LegendaryProfileCustomizationScreen( state: LegendaryProfileCustomizationContract.UiState, eventPublisher: (LegendaryProfileCustomizationContract.UiEvent) -&gt; Unit, onClose: () -&gt; Unit, )</ID>
    <ID>LongMethod:MessageConversationListScreen.kt$@Composable private fun ConversationListItem( conversation: MessageConversationUi, onConversationClick: (String) -&gt; Unit, onProfileClick: (profileId: String) -&gt; Unit, )</ID>
    <ID>LongMethod:MessageConversationListScreen.kt$@Composable private fun MessagesTabs( relation: ConversationRelation, onFollowsTabClick: () -&gt; Unit, onOtherTabClick: () -&gt; Unit, onMarkAllRead: () -&gt; Unit, )</ID>
    <ID>LongMethod:MultipleUserPicker.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun MultipleUserPicker( modifier: Modifier = Modifier, sheetTitle: String, placeholderText: String, onDismissRequest: () -&gt; Unit, onUsersSelected: (Set&lt;UserProfileItemUi&gt;) -&gt; Unit, sheetState: SheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true), startingSelectedUsers: Set&lt;UserProfileItemUi&gt;, )</ID>
    <ID>LongMethod:NostrUserText.kt$@Composable fun NostrUserText( displayName: String, internetIdentifier: String?, modifier: Modifier = Modifier, displayNameColor: Color = AppTheme.colorScheme.onSurface, fontSize: TextUnit = TextUnit.Unspecified, style: TextStyle = LocalTextStyle.current, overflow: TextOverflow = TextOverflow.Ellipsis, maxLines: Int = 1, internetIdentifierBadgeSize: Dp = 14.dp, internetIdentifierBadgeAlign: PlaceholderVerticalAlign = PlaceholderVerticalAlign.Center, customBadgeStyle: LegendaryStyle? = null, annotatedStringPrefixBuilder: (AnnotatedString.Builder.() -&gt; Unit)? = null, annotatedStringSuffixBuilder: (AnnotatedString.Builder.() -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:NoteActionsRow.kt$@Composable fun FeedNoteActionsRow( modifier: Modifier, eventStats: EventStatsUi, isBookmarked: Boolean, highlightedNote: Boolean = false, showBookmark: Boolean = false, showCounts: Boolean = true, onPostAction: ((FeedPostAction) -&gt; Unit)? = null, onPostLongPressAction: ((FeedPostAction) -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:NoteContent.kt$@OptIn(ExperimentalFoundationApi::class) @Composable fun NoteContent( modifier: Modifier = Modifier, data: NoteContentUi, expanded: Boolean, noteCallbacks: NoteCallbacks, maxLines: Int = Int.MAX_VALUE, overflow: TextOverflow = TextOverflow.Clip, enableTweetsMode: Boolean = false, textSelectable: Boolean = false, referencedEventsHaveBorder: Boolean = false, highlightColor: Color = AppTheme.colorScheme.secondary, contentColor: Color = AppTheme.colorScheme.onSurface, referencedEventsContainerColor: Color = AppTheme.extraColorScheme.surfaceVariantAlt1, onClick: ((offset: Offset) -&gt; Unit)? = null, onUrlClick: ((url: String) -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:NoteDropdownMenu.kt$@Composable fun NoteDropdownMenuIcon( modifier: Modifier, noteId: String, noteContent: String, noteRawData: String, authorId: String, isBookmarked: Boolean, enabled: Boolean = true, onBookmarkClick: (() -&gt; Unit)? = null, onMuteUserClick: (() -&gt; Unit)? = null, onReportContentClick: (() -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:NoteEditorScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun NoteEditorBox( state: NoteEditorContract.UiState, eventPublisher: (UiEvent) -&gt; Unit, modifier: Modifier = Modifier, contentPadding: PaddingValues, )</ID>
    <ID>LongMethod:NoteFeedLazyColumn.kt$@ExperimentalMaterial3Api @ExperimentalFoundationApi @Composable fun NoteFeedLazyColumn( modifier: Modifier = Modifier, pagingItems: LazyPagingItems&lt;FeedPostUi&gt;, listState: LazyListState, showPaywall: Boolean, noteCallbacks: NoteCallbacks, onGoToWallet: () -&gt; Unit, showTopZaps: Boolean = false, shouldShowLoadingState: Boolean = true, shouldShowNoContentState: Boolean = true, showReplyTo: Boolean = true, noContentVerticalArrangement: Arrangement.Vertical = Arrangement.Center, noContentPaddingValues: PaddingValues = PaddingValues(all = 0.dp), noContentText: String = stringResource(id = R.string.feed_no_content), contentPadding: PaddingValues = PaddingValues(all = 0.dp), header: @Composable (LazyItemScope.() -&gt; Unit)? = null, stickyHeader: @Composable (LazyItemScope.() -&gt; Unit)? = null, onUiError: ((UiError) -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:NoteVideoLinkPreview.kt$@Composable fun NoteVideoLinkPreview( url: String, title: String?, thumbnailUrl: String?, thumbnailImageSize: DpSize, type: NoteAttachmentType, onClick: (() -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:NotificationListItem.kt$@Composable private fun NotificationType.toSuffixText(usersZappedCount: Int = 0, totalSatsZapped: String? = null): String</ID>
    <ID>LongMethod:NotificationsScreen.kt$@ExperimentalMaterial3Api @Composable private fun NotificationsList( state: NotificationsContract.UiState, noteState: NoteContract.UiState, listState: LazyListState, seenPagingItems: LazyPagingItems&lt;NotificationUi&gt;, paddingValues: PaddingValues, noteCallbacks: NoteCallbacks, onGoToWallet: () -&gt; Unit, onPostLikeClick: (FeedPostUi) -&gt; Unit, onRepostClick: (FeedPostUi) -&gt; Unit, onZapClick: (FeedPostUi, ULong?, String?) -&gt; Unit, onPostQuoteClick: (FeedPostUi) -&gt; Unit, onBookmarkClick: (FeedPostUi) -&gt; Unit, )</ID>
    <ID>LongMethod:NotificationsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun NotificationsScreen( state: NotificationsContract.UiState, noteState: NoteContract.UiState, noteCallbacks: NoteCallbacks, onGoToWallet: () -&gt; Unit, onSearchClick: () -&gt; Unit, onPrimaryDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onDrawerDestinationClick: (DrawerScreenDestination) -&gt; Unit, onDrawerQrCodeClick: () -&gt; Unit, noteEventPublisher: (NoteContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:OnboardingProfileFollowsScreen.kt$@ExperimentalMaterial3Api @Composable fun OnboardingProfileFollowsScreen( state: OnboardingContract.UiState, eventPublisher: (OnboardingContract.UiEvent) -&gt; Unit, onBack: () -&gt; Unit, )</ID>
    <ID>LongMethod:PremiumBuyingScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun PremiumBuyingScreen( state: PremiumBuyingContract.UiState, eventPublisher: (PremiumBuyingContract.UiEvent) -&gt; Unit, screenCallbacks: PremiumBuyingContract.ScreenCallbacks, )</ID>
    <ID>LongMethod:PremiumContactListScreen.kt$@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class) @Composable private fun PremiumContactListScreen( state: PremiumContactListContract.UiState, eventPublisher: (PremiumContactListContract.UiEvent) -&gt; Unit, snackbarHostState: SnackbarHostState, onClose: () -&gt; Unit, )</ID>
    <ID>LongMethod:PremiumContentBackupScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun PremiumContentBackupScreen( state: PremiumContentBackupContract.UiState, eventPublisher: (PremiumContentBackupContract.UiEvent) -&gt; Unit, onClose: () -&gt; Unit, )</ID>
    <ID>LongMethod:PremiumHomeScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun PremiumHomeScreen( state: PremiumHomeContract.UiState, onClose: () -&gt; Unit, onRenewSubscription: (primalName: String) -&gt; Unit, onManagePremium: () -&gt; Unit, onSupportPrimal: () -&gt; Unit, eventPublisher: (PremiumHomeContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:PremiumOrderHistoryScreen.kt$@Composable private fun SubscriptionHeader( modifier: Modifier, state: PremiumOrderHistoryContract.UiState, onExtendSubscription: (primalName: String) -&gt; Unit, onCancelSubscription: () -&gt; Unit, )</ID>
    <ID>LongMethod:PremiumOrderHistoryScreen.kt$@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class) @Composable private fun PremiumOrderHistoryScreen( state: PremiumOrderHistoryContract.UiState, eventPublisher: (PremiumOrderHistoryContract.UiEvent) -&gt; Unit, onExtendSubscription: (primalName: String) -&gt; Unit, onClose: () -&gt; Unit, )</ID>
    <ID>LongMethod:PremiumPurchaseStage.kt$@ExperimentalMaterial3Api @Composable fun PremiumPurchaseStage( state: PremiumBuyingContract.UiState, onBack: () -&gt; Unit, onLearnMoreClick: () -&gt; Unit, eventPublisher: (PremiumBuyingContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:PrimalAppNavigation.kt$@OptIn(ExperimentalSharedTransitionApi::class) @Composable fun SharedTransitionScope.PrimalAppNavigation()</ID>
    <ID>LongMethod:PrimalDrawer.kt$@Composable private fun DrawerHeader( userAccount: UserAccount?, legendaryCustomization: LegendaryCustomization?, onQrCodeClick: () -&gt; Unit, )</ID>
    <ID>LongMethod:PrimalDrawerScaffold.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun PrimalDrawerScaffold( modifier: Modifier = Modifier, drawerState: DrawerState, activeDestination: PrimalTopLevelDestination, onPrimaryDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onDrawerDestinationClick: (DrawerScreenDestination) -&gt; Unit, onDrawerQrCodeClick: () -&gt; Unit, badges: Badges = Badges(), onActiveDestinationClick: () -&gt; Unit = {}, topAppBarState: TopAppBarState = remember { TopAppBarState( initialHeightOffsetLimit = -Float.MAX_VALUE, initialHeightOffset = 0f, initialContentOffset = 0f, ) }, topAppBar: @Composable (TopAppBarScrollBehavior?) -&gt; Unit = {}, content: @Composable (PaddingValues) -&gt; Unit = {}, floatingNewDataHost: @Composable () -&gt; Unit = {}, floatingActionButton: @Composable () -&gt; Unit = {}, snackbarHost: @Composable () -&gt; Unit = {}, focusModeEnabled: Boolean = true, )</ID>
    <ID>LongMethod:PrimalNavigationBar.kt$@Composable fun PrimalNavigationBarLightningBolt( modifier: Modifier = Modifier, activeDestination: PrimalTopLevelDestination, onTopLevelDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onActiveDestinationClick: (() -&gt; Unit)? = null, badges: Badges = Badges(), )</ID>
    <ID>LongMethod:PrimalTopAppBar.kt$@OptIn(ExperimentalFoundationApi::class) @ExperimentalMaterial3Api @Composable fun PrimalTopAppBar( modifier: Modifier = Modifier, title: String = "", subtitle: String? = null, titleTrailingIcon: ImageVector? = null, textColor: Color = LocalContentColor.current, navigationIcon: ImageVector? = null, navigationIconTintColor: Color = LocalContentColor.current, navigationIconContentDescription: String? = null, onNavigationIconClick: (() -&gt; Unit)? = null, autoCloseKeyboardOnNavigationIconClick: Boolean = true, avatarCdnImage: CdnImage? = null, legendaryCustomization: LegendaryCustomization? = null, actions: (@Composable RowScope.() -&gt; Unit)? = null, showDivider: Boolean = true, scrollBehavior: TopAppBarScrollBehavior? = null, onTitleClick: (() -&gt; Unit)? = null, onTitleLongClick: (() -&gt; Unit)? = null, colors: TopAppBarColors = TopAppBarDefaults.centerAlignedTopAppBarColors( containerColor = AppTheme.colorScheme.surface, scrolledContainerColor = AppTheme.colorScheme.surface, ), footer: @Composable () -&gt; Unit = {}, )</ID>
    <ID>LongMethod:ReactionsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun ReactionsScreen( state: ReactionsContract.UiState, onClose: () -&gt; Unit, onProfileClick: (profileId: String) -&gt; Unit, )</ID>
    <ID>LongMethod:ReadsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun ReadsScreen( state: ReadsScreenContract.UiState, onTopLevelDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onDrawerScreenClick: (DrawerScreenDestination) -&gt; Unit, onDrawerQrCodeClick: () -&gt; Unit, onSearchClick: () -&gt; Unit, onArticleClick: (naddr: String) -&gt; Unit, onGetPremiumClick: () -&gt; Unit, eventPublisher: (ReadsScreenContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:ReceivePaymentScreen.kt$@Composable private fun ReceivePaymentViewer( paddingValues: PaddingValues, state: UiState, onBuyPremium: () -&gt; Unit, onCopyClick: () -&gt; Unit, onEditClick: () -&gt; Unit, )</ID>
    <ID>LongMethod:ReceivePaymentScreen.kt$@ExperimentalComposeUiApi @Composable private fun ReceivePaymentEditor( paddingValues: PaddingValues, paymentDetails: PaymentDetails, applying: Boolean, onApplyChanges: (String, String?) -&gt; Unit, onCancel: () -&gt; Unit, )</ID>
    <ID>LongMethod:SearchScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun SearchScreen( state: SearchContract.UiState, searchScope: SearchScope, eventPublisher: (SearchContract.UiEvent) -&gt; Unit, onClose: () -&gt; Unit, onAdvancedSearchClick: (query: String) -&gt; Unit, onProfileClick: (String) -&gt; Unit, onNoteClick: (String) -&gt; Unit, onNaddrClick: (String) -&gt; Unit, onSearchContent: (scope: SearchScope, query: String) -&gt; Unit, )</ID>
    <ID>LongMethod:SendPaymentScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun SendPaymentScreen( state: SendPaymentContract.UiState, eventPublisher: (SendPaymentContract.UiEvent) -&gt; Unit, onClose: () -&gt; Unit, )</ID>
    <ID>LongMethod:ThreadScreen.kt$@OptIn(ExperimentalLayoutApi::class, ExperimentalMaterial3Api::class) @Composable private fun ThreadLazyColumn( modifier: Modifier, state: ThreadContract.UiState, noteCallbacks: NoteCallbacks, onGoToWallet: (() -&gt; Unit), paddingValues: PaddingValues = PaddingValues(all = 0.dp), onUiError: ((UiError) -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:ThreadScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun ThreadScreen( state: ThreadContract.UiState, onClose: () -&gt; Unit, noteCallbacks: NoteCallbacks, onGoToWallet: () -&gt; Unit, onExpandReply: (args: NoteEditorArgs) -&gt; Unit, eventPublisher: (ThreadContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:TransactionEditor.kt$@Composable private fun TransactionHeaderColumn( modifier: Modifier, uiMode: UiDensityMode, state: CreateTransactionContract.UiState, keyboardVisible: Boolean, onAmountClick: () -&gt; Unit, )</ID>
    <ID>LongMethod:TransactionEditor.kt$@ExperimentalMaterial3Api @ExperimentalComposeUiApi @Composable fun TransactionEditor( modifier: Modifier, state: CreateTransactionContract.UiState, paddingValues: PaddingValues, eventPublisher: (CreateTransactionContract.UiEvent) -&gt; Unit, onCancelClick: () -&gt; Unit, )</ID>
    <ID>LongMethod:WalletDashboardScreen.kt$@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class) @Composable fun WalletDashboardScreen( state: WalletDashboardContract.UiState, onPrimaryDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onDrawerDestinationClick: (DrawerScreenDestination) -&gt; Unit, onDrawerQrCodeClick: () -&gt; Unit, onWalletActivateClick: () -&gt; Unit, onProfileClick: (String) -&gt; Unit, onTransactionClick: (String) -&gt; Unit, onSendClick: () -&gt; Unit, onScanClick: () -&gt; Unit, onReceiveClick: () -&gt; Unit, eventPublisher: (UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:ZapSettingsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun ZapSettingsScreen( uiState: ZapSettingsContract.UiState, onClose: () -&gt; Unit, eventPublisher: (ZapSettingsContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongParameterList:ArticleDetailsViewModel.kt$ArticleDetailsViewModel$( savedStateHandle: SavedStateHandle, private val activeAccountStore: ActiveAccountStore, private val articleRepository: ArticleRepository, private val feedRepository: FeedRepository, private val highlightRepository: HighlightRepository, private val profileRepository: ProfileRepository, private val eventRepository: EventRepository, private val zapHandler: ZapHandler, )</ID>
    <ID>LongParameterList:ContentAppearance.kt$ContentAppearance$( val noteBodyFontSize: TextUnit, val noteBodyLineHeight: TextUnit, val noteUsernameSize: TextUnit, val noteAvatarSize: Dp, val articleTextFontSize: TextUnit, val articleTextLineHeight: TextUnit, val tweetFontSize: TextUnit, val tweetLineHeight: TextUnit, )</ID>
    <ID>LongParameterList:MessagesProcessor.kt$MessagesProcessor$( userId: String, messages: List&lt;NostrEvent&gt;, profileMetadata: List&lt;NostrEvent&gt;, mediaResources: List&lt;PrimalEvent&gt;, primalUserNames: PrimalEvent?, primalPremiumInfo: PrimalEvent?, primalLegendProfiles: PrimalEvent?, )</ID>
    <ID>LongParameterList:NostrResources.kt$( eventId: String, eventIdToNostrEvent: Map&lt;String, NostrEvent&gt;, postIdToPostDataMap: Map&lt;String, PostData&gt;, articleIdToArticle: Map&lt;String, ArticleData&gt;, profileIdToProfileDataMap: Map&lt;String, ProfileData&gt;, cdnResources: Map&lt;String, CdnResource&gt;, linkPreviews: Map&lt;String, LinkPreviewData&gt;, videoThumbnails: Map&lt;String, String&gt;, )</ID>
    <ID>LongParameterList:NostrResources.kt$( eventIdToNostrEvent: Map&lt;String, NostrEvent&gt;, postIdToPostDataMap: Map&lt;String, PostData&gt;, articleIdToArticle: Map&lt;String, ArticleData&gt;, profileIdToProfileDataMap: Map&lt;String, ProfileData&gt;, cdnResources: Map&lt;String, CdnResource&gt;, linkPreviews: Map&lt;String, LinkPreviewData&gt;, videoThumbnails: Map&lt;String, String&gt;, )</ID>
    <ID>LongParameterList:NostrResources.kt$( refNote: PostData?, refPostAuthor: ProfileData?, cdnResources: Map&lt;String, CdnResource&gt;, linkPreviews: Map&lt;String, LinkPreviewData&gt;, videoThumbnails: Map&lt;String, String&gt;, eventIdToNostrEvent: Map&lt;String, NostrEvent&gt;, postIdToPostDataMap: Map&lt;String, PostData&gt;, articleIdToArticle: Map&lt;String, ArticleData&gt;, profileIdToProfileDataMap: Map&lt;String, ProfileData&gt;, )</ID>
    <ID>LongParameterList:NoteEditorViewModel.kt$NoteEditorViewModel$( @Assisted private val args: NoteEditorArgs, private val dispatcherProvider: CoroutineDispatcherProvider, private val fileAnalyser: FileAnalyser, private val activeAccountStore: ActiveAccountStore, private val feedRepository: FeedRepository, private val notePublishHandler: NotePublishHandler, private val attachmentRepository: AttachmentsRepository, private val exploreRepository: ExploreRepository, private val profileRepository: ProfileRepository, private val articleRepository: ArticleRepository, )</ID>
    <ID>LongParameterList:ProfileDetailsViewModel.kt$ProfileDetailsViewModel$( savedStateHandle: SavedStateHandle, private val dispatcherProvider: CoroutineDispatcherProvider, private val activeAccountStore: ActiveAccountStore, private val feedsRepository: FeedsRepository, private val profileRepository: ProfileRepository, private val mutedUserRepository: MutedUserRepository, private val zapHandler: ZapHandler, )</ID>
    <ID>LongParameterList:SubscriptionsManager.kt$SubscriptionsManager$( dispatcherProvider: CoroutineDispatcherProvider, private val activeAccountStore: ActiveAccountStore, private val userRepository: UserRepository, private val nostrNotary: NostrNotary, private val appConfigProvider: AppConfigProvider, @PrimalCacheApiClient private val cacheApiClient: PrimalApiClient, @PrimalWalletApiClient private val walletApiClient: PrimalApiClient, )</ID>
    <ID>LongParameterList:UserDataUpdater.kt$UserDataUpdater$( @Assisted val userId: String, private val settingsRepository: SettingsRepository, private val userRepository: UserRepository, private val walletRepository: WalletRepository, private val relayRepository: RelayRepository, private val bookmarksRepository: BookmarksRepository, private val premiumRepository: PremiumRepository, )</ID>
    <ID>LongParameterList:UserRepository.kt$UserRepository$( private val database: PrimalDatabase, private val dispatchers: CoroutineDispatcherProvider, private val userAccountFetcher: UserAccountFetcher, private val accountsStore: UserAccountsStore, private val fileUploader: PrimalFileUploader, private val usersApi: UsersApi, private val nostrPublisher: NostrPublisher, )</ID>
    <ID>LongParameterList:ZapHandler.kt$ZapHandler$( private val dispatcherProvider: CoroutineDispatcherProvider, private val accountsStore: UserAccountsStore, private val nwcNostrZapperFactory: NwcNostrZapperFactory, private val primalWalletZapper: WalletNostrZapper, private val relayRepository: RelayRepository, private val notary: NostrNotary, private val database: PrimalDatabase, )</ID>
    <ID>MagicNumber:Nip19TLV.kt$Nip19TLV$4</ID>
    <ID>MagicNumber:Nip19TLV.kt$Nip19TLV.Type.KIND$3</ID>
    <ID>MagicNumber:NostrIncomingMessageParser.kt$3</ID>
    <ID>MagicNumber:NostrResources.kt$3</ID>
    <ID>MagicNumber:NostrWalletConnectParser.kt$64</ID>
    <ID>MagicNumber:PrimalDrawer.kt$0.5f</ID>
    <ID>MagicNumber:PrimalDrawerScaffold.kt$0.5f</ID>
    <ID>MatchingDeclarationName:__PrimalIcons.kt$PrimalIcons</ID>
    <ID>ReturnCount:LnInvoiceUtils.kt$LnInvoiceUtils$private fun getAmount(invoice: String): BigDecimal</ID>
    <ID>ReturnCount:MessagesRemoteMediator.kt$MessagesRemoteMediator$override suspend fun load(loadType: LoadType, state: PagingState&lt;Int, DirectMessage&gt;): MediatorResult</ID>
    <ID>ReturnCount:NostrResources.kt$private fun String.nostrUriToBytes(): ByteArray?</ID>
    <ID>ReturnCount:NotificationEvents.kt$fun ContentPrimalNotification.asNotificationPOOrNull(): NotificationData?</ID>
    <ID>ReturnCount:NotificationsRemoteMediator.kt$NotificationsRemoteMediator$override suspend fun load(loadType: LoadType, state: PagingState&lt;Int, Notification&gt;): MediatorResult</ID>
    <ID>ReturnCount:NumberUtils.kt$@Suppress("MagicNumber", "ImplicitDefaultLocale") fun Long.shortened(): String</ID>
    <ID>ReturnCount:WalletTransactionsMediator.kt$WalletTransactionsMediator$override suspend fun load(loadType: LoadType, state: PagingState&lt;Int, WalletTransaction&gt;): MediatorResult</ID>
    <ID>SpreadOperator:NotePublishHandler.kt$NotePublishHandler$(*rootEventTags.toTypedArray(), replyEventTag)</ID>
    <ID>ThrowsCount:LnInvoiceUtils.kt$LnInvoiceUtils$private fun decodeUnlimitedLength(invoice: String): Boolean</ID>
    <ID>TooGenericExceptionCaught:NostrIncomingMessageParser.kt$error: Exception</ID>
    <ID>TooManyFunctions:FeedExtensions.kt$net.primal.android.feeds.domain.FeedExtensions.kt</ID>
    <ID>TooManyFunctions:FeedsRepository.kt$FeedsRepository</ID>
    <ID>TooManyFunctions:NostrNotary.kt$NostrNotary</ID>
    <ID>TooManyFunctions:NostrResources.kt$net.primal.android.nostr.ext.NostrResources.kt</ID>
    <ID>TooManyFunctions:PremiumApi.kt$PremiumApi</ID>
    <ID>TooManyFunctions:PremiumApiImpl.kt$PremiumApiImpl : PremiumApi</ID>
    <ID>TooManyFunctions:PremiumRepository.kt$PremiumRepository</ID>
    <ID>TooManyFunctions:PrimalAppNavigation.kt$net.primal.android.navigation.PrimalAppNavigation.kt</ID>
    <ID>TooManyFunctions:ProfileRepository.kt$ProfileRepository</ID>
    <ID>TooManyFunctions:Tags.kt$net.primal.android.nostr.ext.Tags.kt</ID>
    <ID>TooManyFunctions:UserRepository.kt$UserRepository</ID>
    <ID>TooManyFunctions:WalletApi.kt$WalletApi</ID>
    <ID>TooManyFunctions:WalletApiImpl.kt$WalletApiImpl : WalletApi</ID>
    <ID>TooManyFunctions:WalletRepository.kt$WalletRepository</ID>
  </CurrentIssues>
</SmellBaseline>
