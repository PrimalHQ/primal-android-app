<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>CyclomaticComplexMethod:ChatScreen.kt$@Composable private fun ChatMessageListItem( chatMessage: ChatMessageUi, previousMessage: ChatMessageUi? = null, nextMessage: ChatMessageUi? = null, onProfileClick: (String) -&gt; Unit, onNoteClick: (String) -&gt; Unit, onUrlClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:CreateAccountViewModel.kt$CreateAccountViewModel$private fun observeEvents()</ID>
    <ID>CyclomaticComplexMethod:FeedLazyColumn.kt$@ExperimentalMaterial3Api @ExperimentalFoundationApi @Composable fun FeedLazyColumn( pagingItems: LazyPagingItems&lt;FeedPostUi&gt;, contentPadding: PaddingValues, listState: LazyListState, onMuteClick: ((String) -&gt; Unit)? = null, onPostClick: (String) -&gt; Unit, onProfileClick: (String) -&gt; Unit, onPostLikeClick: (FeedPostUi) -&gt; Unit, onRepostClick: (FeedPostUi) -&gt; Unit, onZapClick: (FeedPostUi, ULong?, String?) -&gt; Unit, onPostReplyClick: (String) -&gt; Unit, onPostQuoteClick: (FeedPostUi) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onWalletUnavailable: () -&gt; Unit, walletConnected: Boolean, defaultZapAmount: ULong? = null, zapOptions: List&lt;ULong&gt;? = null, shouldShowLoadingState: Boolean = true, shouldShowNoContentState: Boolean = true, header: @Composable (LazyItemScope.() -&gt; Unit)? = null, stickyHeader: @Composable (LazyItemScope.() -&gt; Unit)? = null, )</ID>
    <ID>CyclomaticComplexMethod:FeedRemoteMediator.kt$FeedRemoteMediator$override suspend fun load(loadType: LoadType, state: PagingState&lt;Int, FeedPost&gt;): MediatorResult</ID>
    <ID>CyclomaticComplexMethod:MessagesRemoteMediator.kt$MessagesRemoteMediator$override suspend fun load(loadType: LoadType, state: PagingState&lt;Int, DirectMessage&gt;): MediatorResult</ID>
    <ID>CyclomaticComplexMethod:NoteEditorScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun NoteEditorScreen( state: NoteEditorContract.UiState, onClose: () -&gt; Unit, eventPublisher: (UiEvent) -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:NotificationEvents.kt$private fun ContentPrimalNotification.parseActionPostId(type: NotificationType): String?</ID>
    <ID>CyclomaticComplexMethod:NotificationEvents.kt$private fun ContentPrimalNotification.parseActionUserId(type: NotificationType): String?</ID>
    <ID>CyclomaticComplexMethod:NotificationListItem.kt$@Composable fun NotificationListItem( notifications: List&lt;NotificationUi&gt;, type: NotificationType, walletConnected: Boolean, onProfileClick: (String) -&gt; Unit, onNoteClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onReplyClick: (String) -&gt; Unit, onPostLikeClick: (FeedPostUi) -&gt; Unit, onRepostClick: (FeedPostUi) -&gt; Unit, onDefaultZapClick: (FeedPostUi) -&gt; Unit, onZapOptionsClick: (FeedPostUi) -&gt; Unit, onWalletUnavailable: () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:NotificationListItem.kt$@Composable private fun NotificationListItem( notifications: List&lt;NotificationUi&gt;, imagePainter: Painter, suffixText: String, onProfileClick: (String) -&gt; Unit, onPostClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onPostAction: (FeedPostAction) -&gt; Unit, onPostLongPressAction: (FeedPostAction) -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:NotificationListItem.kt$@Composable private fun NotificationType.toSuffixText(usersZappedCount: Int = 0, totalSatsZapped: String? = null): String</ID>
    <ID>CyclomaticComplexMethod:NotificationTypePainter.kt$@Composable fun NotificationType.toImagePainter(): Painter</ID>
    <ID>CyclomaticComplexMethod:NotificationsRemoteMediator.kt$NotificationsRemoteMediator$override suspend fun load(loadType: LoadType, state: PagingState&lt;Int, Notification&gt;): MediatorResult</ID>
    <ID>CyclomaticComplexMethod:NotificationsScreen.kt$@ExperimentalMaterial3Api @Composable private fun NotificationsList( state: NotificationsContract.UiState, listState: LazyListState, seenPagingItems: LazyPagingItems&lt;NotificationUi&gt;, paddingValues: PaddingValues, onProfileClick: (String) -&gt; Unit, onNoteClick: (String) -&gt; Unit, onNoteReplyClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onWalletUnavailable: () -&gt; Unit, onPostLikeClick: (FeedPostUi) -&gt; Unit, onRepostClick: (FeedPostUi) -&gt; Unit, onZapClick: (FeedPostUi, ULong?, String?) -&gt; Unit, onPostQuoteClick: (FeedPostUi) -&gt; Unit, bottomBarHeightPx: Float = 0F, bottomBarOffsetHeightPx: Float = 0F, )</ID>
    <ID>CyclomaticComplexMethod:NotificationsSettingsScreen.kt$@Composable private fun NotificationType.toTitle(): String</ID>
    <ID>CyclomaticComplexMethod:ProfileScreen.kt$@Composable private fun ErrorHandler(error: ProfileError?, snackbarHostState: SnackbarHostState)</ID>
    <ID>CyclomaticComplexMethod:ProfileScreen.kt$@OptIn(ExperimentalFoundationApi::class, ExperimentalMaterial3Api::class) @Composable fun ProfileScreen( state: ProfileContract.UiState, onClose: () -&gt; Unit, onPostClick: (String) -&gt; Unit, onPostReplyClick: (String) -&gt; Unit, onPostQuoteClick: (String) -&gt; Unit, onProfileClick: (String) -&gt; Unit, onEditProfileClick: () -&gt; Unit, onMessageClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onWalletUnavailable: () -&gt; Unit, eventPublisher: (ProfileContract.UiEvent) -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:ThreadScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun ThreadScreen( state: ThreadContract.UiState, onClose: () -&gt; Unit, onPostClick: (String) -&gt; Unit, onPostReplyClick: (String) -&gt; Unit, onPostQuoteClick: (String) -&gt; Unit, onProfileClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onWalletUnavailable: () -&gt; Unit, onReplyInNoteEditor: (String, Uri?, String) -&gt; Unit, eventPublisher: (ThreadContract.UiEvent) -&gt; Unit, )</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:PrimalDrawer.kt$val (avatarRef, usernameRef, iconRef, identifierRef, statsRef) = createRefs()</ID>
    <ID>EmptyDefaultConstructor:ProfileViewModelTest.kt$ProfileViewModelTest$()</ID>
    <ID>EmptyFunctionBlock:PostStatsUpdaterTest.kt$PostStatsUpdaterTest${ }</ID>
    <ID>EmptyFunctionBlock:ProfileRepositoryTest.kt$ProfileRepositoryTest${ }</ID>
    <ID>ExplicitItLambdaParameter:BadgesManager.kt$BadgesManager${ it -&gt; when (it) { is NostrIncomingMessage.EventMessage -&gt; { it.primalEvent?.asMessagesTotalCount()?.let { summary -&gt; emit(summary) } } else -&gt; Unit } }</ID>
    <ID>ExplicitItLambdaParameter:BadgesManager.kt$BadgesManager${ it -&gt; when (it) { is NostrIncomingMessage.EventMessage -&gt; { it.primalEvent?.asNotificationSummary()?.let { summary -&gt; emit(summary) } } else -&gt; Unit } }</ID>
    <ID>ForEachOnRange:ConversionUtils.kt$0..3</ID>
    <ID>ImplicitDefaultLocale:IntUtils.kt$String.format("%.1f", total)</ID>
    <ID>LongMethod:AccountSettingsScreen.kt$@Composable fun PrivateKeySection(nsec: String)</ID>
    <ID>LongMethod:AppearanceSettingsScreen.kt$@Composable private fun ThemeBox( primalTheme: PrimalTheme, state: AppearanceSettingsContract.UiState, eventPublisher: (AppearanceSettingsContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:ChatScreen.kt$@Composable private fun ChatList( messages: LazyPagingItems&lt;ChatMessageUi&gt;, modifier: Modifier = Modifier, state: LazyListState = rememberLazyListState(), contentPadding: PaddingValues = PaddingValues(0.dp), onProfileClick: (String) -&gt; Unit, onNoteClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, )</ID>
    <ID>LongMethod:ChatScreen.kt$@Composable private fun ChatMessageListItem( chatMessage: ChatMessageUi, previousMessage: ChatMessageUi? = null, nextMessage: ChatMessageUi? = null, onProfileClick: (String) -&gt; Unit, onNoteClick: (String) -&gt; Unit, onUrlClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, )</ID>
    <ID>LongMethod:EditProfileScreen.kt$@OptIn(ExperimentalComposeUiApi::class) @Composable fun EditProfileContent( state: EditProfileContract.UiState, eventPublisher: (EditProfileContract.UiEvent) -&gt; Unit, paddingValues: PaddingValues, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:ExploreFeedScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun ExploreFeedScreen( state: ExploreFeedContract.UiState, onClose: () -&gt; Unit, onPostClick: (String) -&gt; Unit, onPostReplyClick: (String) -&gt; Unit, onPostQuoteClick: (String) -&gt; Unit, onProfileClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onWalletUnavailable: () -&gt; Unit, eventPublisher: (ExploreFeedContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:FeedLazyColumn.kt$@ExperimentalMaterial3Api @ExperimentalFoundationApi @Composable fun FeedLazyColumn( pagingItems: LazyPagingItems&lt;FeedPostUi&gt;, contentPadding: PaddingValues, listState: LazyListState, onMuteClick: ((String) -&gt; Unit)? = null, onPostClick: (String) -&gt; Unit, onProfileClick: (String) -&gt; Unit, onPostLikeClick: (FeedPostUi) -&gt; Unit, onRepostClick: (FeedPostUi) -&gt; Unit, onZapClick: (FeedPostUi, ULong?, String?) -&gt; Unit, onPostReplyClick: (String) -&gt; Unit, onPostQuoteClick: (FeedPostUi) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onWalletUnavailable: () -&gt; Unit, walletConnected: Boolean, defaultZapAmount: ULong? = null, zapOptions: List&lt;ULong&gt;? = null, shouldShowLoadingState: Boolean = true, shouldShowNoContentState: Boolean = true, header: @Composable (LazyItemScope.() -&gt; Unit)? = null, stickyHeader: @Composable (LazyItemScope.() -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:FeedNoteCard.kt$@Composable fun FeedNoteCard( data: FeedPostUi, shape: Shape = CardDefaults.shape, cardPadding: PaddingValues = PaddingValues(all = 0.dp), fullWidthNote: Boolean = false, headerSingleLine: Boolean = true, fullWidthContent: Boolean = false, forceContentIndent: Boolean = false, drawLineAboveAvatar: Boolean = false, drawLineBelowAvatar: Boolean = false, expanded: Boolean = false, onPostClick: (String) -&gt; Unit, onProfileClick: (String) -&gt; Unit, onPostAction: (FeedPostAction) -&gt; Unit, onPostLongClickAction: (FeedPostAction) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onMuteUserClick: () -&gt; Unit, )</ID>
    <ID>LongMethod:FeedRemoteMediator.kt$FeedRemoteMediator$override suspend fun load(loadType: LoadType, state: PagingState&lt;Int, FeedPost&gt;): MediatorResult</ID>
    <ID>LongMethod:FeedScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun FeedScreen( state: FeedContract.UiState, eventPublisher: (FeedContract.UiEvent) -&gt; Unit, onFeedsClick: () -&gt; Unit, onNewPostClick: (String?) -&gt; Unit, onPostClick: (String) -&gt; Unit, onPostReplyClick: (String) -&gt; Unit, onProfileClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onWalletUnavailable: () -&gt; Unit, onPrimaryDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onDrawerDestinationClick: (DrawerScreenDestination) -&gt; Unit, )</ID>
    <ID>LongMethod:FeedsSettingsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun FeedsSettingsScreen( state: FeedsSettingsContract.UiState, eventPublisher: (FeedsSettingsContract.UiEvent) -&gt; Unit, onClose: () -&gt; Unit, )</ID>
    <ID>LongMethod:FollowRecommendedAccountsStep.kt$@OptIn(ExperimentalFoundationApi::class) @Composable fun FollowRecommendedAccountsStep( state: CreateAccountContract.UiState, eventPublisher: (CreateAccountContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:LoginScreen.kt$@OptIn(ExperimentalComposeUiApi::class) @Composable fun LoginContent( state: LoginContract.UiState, paddingValues: PaddingValues, onLogin: (String) -&gt; Unit, )</ID>
    <ID>LongMethod:MessageConversationListScreen.kt$@Composable private fun MessagesTabs( relation: ConversationRelation, onFollowsTabClick: () -&gt; Unit, onOtherTabClick: () -&gt; Unit, onMarkAllRead: () -&gt; Unit, )</ID>
    <ID>LongMethod:MessageConversationListScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun MessageListScreen( state: MessageConversationListContract.UiState, onPrimaryDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onDrawerDestinationClick: (DrawerScreenDestination) -&gt; Unit, eventPublisher: (UiEvent) -&gt; Unit, onConversationClick: (String) -&gt; Unit, onNewMessageClick: () -&gt; Unit, )</ID>
    <ID>LongMethod:NoteDropdownMenu.kt$@Composable fun NoteDropdownMenuIcon( modifier: Modifier, noteId: String, noteContent: String, noteRawData: String, authorId: String, onMuteUserClick: () -&gt; Unit, )</ID>
    <ID>LongMethod:NoteEditorScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun NoteEditorScreen( state: NoteEditorContract.UiState, onClose: () -&gt; Unit, eventPublisher: (UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:NotificationListItem.kt$@Composable private fun NotificationListItem( notifications: List&lt;NotificationUi&gt;, imagePainter: Painter, suffixText: String, onProfileClick: (String) -&gt; Unit, onPostClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onPostAction: (FeedPostAction) -&gt; Unit, onPostLongPressAction: (FeedPostAction) -&gt; Unit, )</ID>
    <ID>LongMethod:NotificationListItem.kt$@Composable private fun NotificationType.toSuffixText(usersZappedCount: Int = 0, totalSatsZapped: String? = null): String</ID>
    <ID>LongMethod:NotificationsScreen.kt$@ExperimentalMaterial3Api @Composable private fun NotificationsList( state: NotificationsContract.UiState, listState: LazyListState, seenPagingItems: LazyPagingItems&lt;NotificationUi&gt;, paddingValues: PaddingValues, onProfileClick: (String) -&gt; Unit, onNoteClick: (String) -&gt; Unit, onNoteReplyClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onWalletUnavailable: () -&gt; Unit, onPostLikeClick: (FeedPostUi) -&gt; Unit, onRepostClick: (FeedPostUi) -&gt; Unit, onZapClick: (FeedPostUi, ULong?, String?) -&gt; Unit, onPostQuoteClick: (FeedPostUi) -&gt; Unit, bottomBarHeightPx: Float = 0F, bottomBarOffsetHeightPx: Float = 0F, )</ID>
    <ID>LongMethod:NotificationsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun NotificationsScreen( state: NotificationsContract.UiState, onProfileClick: (String) -&gt; Unit, onNoteClick: (String) -&gt; Unit, onNoteReplyClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onWalletUnavailable: () -&gt; Unit, onPostQuoteClick: (String) -&gt; Unit, onNotificationSettings: () -&gt; Unit, onPrimaryDestinationChanged: (PrimalTopLevelDestination) -&gt; Unit, onDrawerDestinationClick: (DrawerScreenDestination) -&gt; Unit, eventPublisher: (NotificationsContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:PrimalAppNavigation.kt$@OptIn(ExperimentalMaterialNavigationApi::class) @Composable fun PrimalAppNavigation()</ID>
    <ID>LongMethod:PrimalDrawer.kt$@Composable private fun DrawerHeader(userAccount: UserAccount?)</ID>
    <ID>LongMethod:ProfileHero.kt$@Composable fun ProfileHero( bannerUri: Uri?, avatarUri: Uri?, onBannerUriChange: (Uri?) -&gt; Unit, onAvatarUriChange: (Uri?) -&gt; Unit, )</ID>
    <ID>LongMethod:ProfilePreviewStep.kt$@Composable fun ProfilePreviewStep(state: CreateAccountContract.UiState, isFinalized: Boolean)</ID>
    <ID>LongMethod:ProfileScreen.kt$@Composable private fun ProfileDropdownMenu( profileId: String, isActiveUser: Boolean, isProfileMuted: Boolean, isProfileFeedInActiveUserFeeds: Boolean, snackbarHostState: SnackbarHostState, uiScope: CoroutineScope, name: String, eventPublisher: (ProfileContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:ProfileScreen.kt$@OptIn(ExperimentalFoundationApi::class, ExperimentalMaterial3Api::class) @Composable fun ProfileScreen( state: ProfileContract.UiState, onClose: () -&gt; Unit, onPostClick: (String) -&gt; Unit, onPostReplyClick: (String) -&gt; Unit, onPostQuoteClick: (String) -&gt; Unit, onProfileClick: (String) -&gt; Unit, onEditProfileClick: () -&gt; Unit, onMessageClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onWalletUnavailable: () -&gt; Unit, eventPublisher: (ProfileContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:ThreadScreen.kt$@OptIn(ExperimentalComposeUiApi::class) @Composable fun ReplyToBottomBar( modifier: Modifier, publishingReply: Boolean, replyToAuthorName: String, replyToAuthorHandle: String, replyTextProvider: () -&gt; String, onPublishReplyClick: () -&gt; Unit, onReplyUpdated: (String) -&gt; Unit, onPhotoImported: (Uri) -&gt; Unit, onExpand: () -&gt; Unit, )</ID>
    <ID>LongMethod:ThreadScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun ThreadScreen( state: ThreadContract.UiState, onClose: () -&gt; Unit, onPostClick: (String) -&gt; Unit, onPostReplyClick: (String) -&gt; Unit, onPostQuoteClick: (String) -&gt; Unit, onProfileClick: (String) -&gt; Unit, onHashtagClick: (String) -&gt; Unit, onMediaClick: (String, String) -&gt; Unit, onWalletUnavailable: () -&gt; Unit, onReplyInNoteEditor: (String, Uri?, String) -&gt; Unit, eventPublisher: (ThreadContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:WelcomeScreen.kt$@Composable fun WelcomeScreen(onSignInClick: () -&gt; Unit, onCreateAccountClick: () -&gt; Unit)</ID>
    <ID>LongMethod:ZapBottomSheet.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun ZapBottomSheet( receiverName: String, defaultZapAmount: ULong, userZapOptions: List&lt;ULong&gt;? = null, onDismissRequest: () -&gt; Unit, onZap: (ULong, String?) -&gt; Unit, )</ID>
    <ID>LongMethod:ZapSettingsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun ZapSettingsScreen( uiState: ZapSettingsContract.UiState, onClose: () -&gt; Unit, eventPublisher: (ZapSettingsContract.UiEvent) -&gt; Unit, )</ID>
    <ID>LongParameterList:ExploreFeedViewModel.kt$ExploreFeedViewModel$( savedStateHandle: SavedStateHandle, private val activeAccountStore: ActiveAccountStore, private val feedRepository: FeedRepository, private val postRepository: PostRepository, private val profileRepository: ProfileRepository, private val zapRepository: ZapRepository, private val settingsRepository: SettingsRepository, private val mutedUserRepository: MutedUserRepository, )</ID>
    <ID>LongParameterList:ExtraColorScheme.kt$( onBrand: Color, surfaceVariantAlt1: Color, surfaceVariantAlt2: Color, surfaceVariantAlt3: Color, onSurfaceVariantAlt1: Color, onSurfaceVariantAlt2: Color, onSurfaceVariantAlt3: Color, onSurfaceVariantAlt4: Color, warning: Color, successBright: Color, successDim: Color, replied: Color, zapped: Color, liked: Color, reposted: Color, )</ID>
    <ID>LongParameterList:ExtraColorScheme.kt$ExtraColorScheme$( onBrand: Color = this.onBrand, surfaceVariantAlt1: Color = this.surfaceVariantAlt1, surfaceVariantAlt2: Color = this.surfaceVariantAlt2, surfaceVariantAlt3: Color = this.surfaceVariantAlt3, onSurfaceVariantAlt1: Color = this.onSurfaceVariantAlt1, onSurfaceVariantAlt2: Color = this.onSurfaceVariantAlt2, onSurfaceVariantAlt3: Color = this.onSurfaceVariantAlt3, onSurfaceVariantAlt4: Color = this.onSurfaceVariantAlt4, warning: Color = this.warning, successBright: Color = this.successBright, successDim: Color = this.successDim, replied: Color = this.replied, zapped: Color = this.zapped, liked: Color = this.liked, reposted: Color = this.reposted, )</ID>
    <ID>LongParameterList:ExtraColorScheme.kt$ExtraColorScheme$( onBrand: Color, surfaceVariantAlt1: Color, surfaceVariantAlt2: Color, surfaceVariantAlt3: Color, onSurfaceVariantAlt1: Color, onSurfaceVariantAlt2: Color, onSurfaceVariantAlt3: Color, onSurfaceVariantAlt4: Color, warning: Color, successBright: Color, successDim: Color, replied: Color, zapped: Color, liked: Color, reposted: Color, )</ID>
    <ID>LongParameterList:FeedViewModel.kt$FeedViewModel$( savedStateHandle: SavedStateHandle, private val feedRepository: FeedRepository, private val postRepository: PostRepository, private val activeAccountStore: ActiveAccountStore, private val userDataSyncerFactory: UserDataUpdaterFactory, private val profileRepository: ProfileRepository, private val zapRepository: ZapRepository, private val badgesManager: BadgesManager, private val mutedUserRepository: MutedUserRepository, )</ID>
    <ID>LongParameterList:MessageRepository.kt$MessageRepository$( private val activeAccountStore: ActiveAccountStore, private val credentialsStore: CredentialsStore, private val database: PrimalDatabase, private val messagesApi: MessagesApi, private val messagesProcessor: MessagesProcessor, private val relaysManager: RelaysManager, private val nostrNotary: NostrNotary, )</ID>
    <ID>LongParameterList:ProfileViewModel.kt$ProfileViewModel$( savedStateHandle: SavedStateHandle, feedRepository: FeedRepository, private val activeAccountStore: ActiveAccountStore, private val profileRepository: ProfileRepository, private val postRepository: PostRepository, private val zapRepository: ZapRepository, private val settingsRepository: SettingsRepository, private val mutedUserRepository: MutedUserRepository, )</ID>
    <ID>LongParameterList:ThreadViewModel.kt$ThreadViewModel$( savedStateHandle: SavedStateHandle, private val activeAccountStore: ActiveAccountStore, private val feedRepository: FeedRepository, private val postRepository: PostRepository, private val profileRepository: ProfileRepository, private val zapRepository: ZapRepository, private val mutedUserRepository: MutedUserRepository, )</ID>
    <ID>MagicNumber:AvatarThumbnailsRow.kt$0xFF111111</ID>
    <ID>MagicNumber:AvatarThumbnailsRow.kt$0xFFC8C8C8</ID>
    <ID>MagicNumber:AvatarThumbnailsRow.kt$99</ID>
    <ID>MagicNumber:ChatScreen.kt$0.25f</ID>
    <ID>MagicNumber:ConversionUtils.kt$0xFFFF</ID>
    <ID>MagicNumber:ConversionUtils.kt$3</ID>
    <ID>MagicNumber:ConversionUtils.kt$4</ID>
    <ID>MagicNumber:ConversionUtils.kt$8</ID>
    <ID>MagicNumber:CreateAccountContract.kt$CreateAccountContract.UiState.CreateAccountStep.ACCOUNT_CREATED$3</ID>
    <ID>MagicNumber:CreateAccountContract.kt$CreateAccountContract.UiState.CreateAccountStep.FOLLOW_RECOMMENDED_ACCOUNTS$4</ID>
    <ID>MagicNumber:ExploreHomeViewModel.kt$ExploreHomeViewModel$3</ID>
    <ID>MagicNumber:Fading.kt$0.99f</ID>
    <ID>MagicNumber:FeedNoteContent.kt$0.77</ID>
    <ID>MagicNumber:FeedNoteContent.kt$500</ID>
    <ID>MagicNumber:FeedNoteList.kt$100</ID>
    <ID>MagicNumber:FeedNoteList.kt$30</ID>
    <ID>MagicNumber:FeedNoteList.kt$5</ID>
    <ID>MagicNumber:FeedViewModel.kt$FeedViewModel$3</ID>
    <ID>MagicNumber:Insets.kt$0.5f</ID>
    <ID>MagicNumber:IntUtils.kt$10</ID>
    <ID>MagicNumber:IntUtils.kt$1000</ID>
    <ID>MagicNumber:IntUtils.kt$1000.0</ID>
    <ID>MagicNumber:IntUtils.kt$1000000.0</ID>
    <ID>MagicNumber:IntUtils.kt$1000000000.0</ID>
    <ID>MagicNumber:ListNoContent.kt$500L</ID>
    <ID>MagicNumber:LnInvoiceUtils.kt$LnInvoiceUtils$0x07</ID>
    <ID>MagicNumber:LnInvoiceUtils.kt$LnInvoiceUtils$0x1ea119fa</ID>
    <ID>MagicNumber:LnInvoiceUtils.kt$LnInvoiceUtils$0x1ffffff</ID>
    <ID>MagicNumber:LnInvoiceUtils.kt$LnInvoiceUtils$0x26508e6d</ID>
    <ID>MagicNumber:LnInvoiceUtils.kt$LnInvoiceUtils$0x2a1462b3</ID>
    <ID>MagicNumber:LnInvoiceUtils.kt$LnInvoiceUtils$0x3b6a57b2</ID>
    <ID>MagicNumber:LnInvoiceUtils.kt$LnInvoiceUtils$0x3d4233dd</ID>
    <ID>MagicNumber:LnInvoiceUtils.kt$LnInvoiceUtils$0x7f</ID>
    <ID>MagicNumber:LnInvoiceUtils.kt$LnInvoiceUtils$0xff</ID>
    <ID>MagicNumber:LnInvoiceUtils.kt$LnInvoiceUtils$100000000</ID>
    <ID>MagicNumber:LnInvoiceUtils.kt$LnInvoiceUtils$126</ID>
    <ID>MagicNumber:LnInvoiceUtils.kt$LnInvoiceUtils$16</ID>
    <ID>MagicNumber:LnInvoiceUtils.kt$LnInvoiceUtils$25</ID>
    <ID>MagicNumber:LnInvoiceUtils.kt$LnInvoiceUtils$33</ID>
    <ID>MagicNumber:LnInvoiceUtils.kt$LnInvoiceUtils$4</ID>
    <ID>MagicNumber:LnInvoiceUtils.kt$LnInvoiceUtils$5</ID>
    <ID>MagicNumber:LnInvoiceUtils.kt$LnInvoiceUtils$6</ID>
    <ID>MagicNumber:LnInvoiceUtils.kt$LnInvoiceUtils$8</ID>
    <ID>MagicNumber:Nip19TLV.kt$Nip19TLV$4</ID>
    <ID>MagicNumber:Nip19TLV.kt$Nip19TLV.Type.KIND$3</ID>
    <ID>MagicNumber:NostrIncomingMessageParser.kt$3</ID>
    <ID>MagicNumber:NostrResources.kt$3</ID>
    <ID>MagicNumber:NostrWalletConnectParser.kt$64</ID>
    <ID>MagicNumber:NotificationsSettingsScreen.kt$0.75f</ID>
    <ID>MagicNumber:PrimalDrawer.kt$0.5f</ID>
    <ID>MagicNumber:ProfilePreviewStep.kt$0xFF181818</ID>
    <ID>MagicNumber:ProfileScreen.kt$0.65f</ID>
    <ID>MagicNumber:ProfileScreen.kt$0.7f</ID>
    <ID>MagicNumber:ReferencedNoteCard.kt$30</ID>
    <ID>MagicNumber:ThreadScreen.kt$3600</ID>
    <ID>MagicNumber:ThreadViewModel.kt$ThreadViewModel$100</ID>
    <ID>MagicNumber:Timestamps.kt$24</ID>
    <ID>MagicNumber:Timestamps.kt$30</ID>
    <ID>MagicNumber:Timestamps.kt$365</ID>
    <ID>MagicNumber:Timestamps.kt$60</ID>
    <ID>MagicNumber:Timestamps.kt$7</ID>
    <ID>MagicNumber:ValidationUtils.kt$32</ID>
    <ID>MagicNumber:ValidationUtils.kt$64</ID>
    <ID>MagicNumber:WalletScreen.kt$0xFF4F1425</ID>
    <ID>MagicNumber:WalletScreen.kt$0xFFFFDF6F</ID>
    <ID>MagicNumber:WelcomeScreen.kt$0.4f</ID>
    <ID>MagicNumber:WelcomeScreen.kt$0.6f</ID>
    <ID>MagicNumber:ZapBottomSheet.kt$3</ID>
    <ID>MagicNumber:ZapBottomSheet.kt$4</ID>
    <ID>MagicNumber:ZapBottomSheet.kt$5</ID>
    <ID>MagicNumber:ZapSettingsScreen.kt$3</ID>
    <ID>MagicNumber:ZapSettingsScreen.kt$4</ID>
    <ID>MagicNumber:ZapSettingsScreen.kt$5</ID>
    <ID>MagicNumber:ZapsApi.kt$ZapsApi$1000</ID>
    <ID>MatchingDeclarationName:__PrimalIcons.kt$PrimalIcons</ID>
    <ID>NestedBlockDepth:FeedRemoteMediator.kt$FeedRemoteMediator$override suspend fun load(loadType: LoadType, state: PagingState&lt;Int, FeedPost&gt;): MediatorResult</ID>
    <ID>ReturnCount:FeedRemoteMediator.kt$FeedRemoteMediator$override suspend fun load(loadType: LoadType, state: PagingState&lt;Int, FeedPost&gt;): MediatorResult</ID>
    <ID>ReturnCount:IntUtils.kt$fun Long.shortened(): String</ID>
    <ID>ReturnCount:LnInvoiceUtils.kt$LnInvoiceUtils$private fun getAmount(invoice: String): BigDecimal</ID>
    <ID>ReturnCount:MessagesRemoteMediator.kt$MessagesRemoteMediator$override suspend fun load(loadType: LoadType, state: PagingState&lt;Int, DirectMessage&gt;): MediatorResult</ID>
    <ID>ReturnCount:NostrResources.kt$private fun String.nostrUriToBytes(): ByteArray?</ID>
    <ID>ReturnCount:NotificationEvents.kt$fun ContentPrimalNotification.asNotificationPOOrNull(): NotificationData?</ID>
    <ID>ReturnCount:NotificationsRemoteMediator.kt$NotificationsRemoteMediator$override suspend fun load(loadType: LoadType, state: PagingState&lt;Int, Notification&gt;): MediatorResult</ID>
    <ID>SwallowedException:CredentialsStore.kt$CredentialsStore$error: DecoderException</ID>
    <ID>SwallowedException:CredentialsStore.kt$CredentialsStore$error: IllegalArgumentException</ID>
    <ID>SwallowedException:DirectMessageEvents.kt$error: GeneralSecurityException</ID>
    <ID>SwallowedException:EditProfileViewModel.kt$EditProfileViewModel$error: WssException</ID>
    <ID>SwallowedException:ExploreHomeViewModel.kt$ExploreHomeViewModel$error: WssException</ID>
    <ID>SwallowedException:LightningExt.kt$error: IllegalArgumentException</ID>
    <ID>SwallowedException:NostrEvents.kt$error: IllegalArgumentException</ID>
    <ID>SwallowedException:NostrJson.kt$error: IllegalArgumentException</ID>
    <ID>SwallowedException:NostrNotary.kt$NostrNotary$error: IllegalArgumentException</ID>
    <ID>SwallowedException:NoteEditorViewModel.kt$NoteEditorViewModel$error: WssException</ID>
    <ID>SwallowedException:Parsers.kt$error: SerializationException</ID>
    <ID>SwallowedException:PostRepository.kt$PostRepository$error: WssException</ID>
    <ID>SwallowedException:PrimalEvents.kt$error: IllegalArgumentException</ID>
    <ID>SwallowedException:PrimalProfileStatsAndScores.kt$error: IllegalArgumentException</ID>
    <ID>SwallowedException:ProfileScreen.kt$error: ActivityNotFoundException</ID>
    <ID>SwallowedException:ProfileViewModel.kt$ProfileViewModel$error: WssException</ID>
    <ID>SwallowedException:RelayPool.kt$RelayPool$error: IllegalArgumentException</ID>
    <ID>SwallowedException:SearchViewModel.kt$SearchViewModel$error: WssException</ID>
    <ID>SwallowedException:ThreadViewModel.kt$ThreadViewModel$error: WssException</ID>
    <ID>SwallowedException:UriHandlerExt.kt$error: ActivityNotFoundException</ID>
    <ID>SwallowedException:ValidationUtils.kt$error: DecoderException</ID>
    <ID>SwallowedException:ValidationUtils.kt$error: IllegalArgumentException</ID>
    <ID>SwallowedException:ZapSettingsViewModel.kt$ZapSettingsViewModel$error: WssException</ID>
    <ID>SwallowedException:ZapsApi.kt$ZapsApi$error: LnInvoiceUtils.AddressFormatException</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:ExploreFeedViewModel.kt$ExploreFeedViewModel$IllegalStateException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:FeedViewModel.kt$FeedViewModel$IllegalStateException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:NotificationsViewModel.kt$NotificationsViewModel$IllegalStateException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:ProfileViewModel.kt$ProfileViewModel$IllegalStateException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:ThreadViewModel.kt$ThreadViewModel$IllegalStateException()</ID>
    <ID>ThrowsCount:FileUploader.kt$FileUploader$@Throws(UnsuccessfulFileUpload::class) suspend fun uploadFile(userId: String, uri: Uri): String</ID>
    <ID>ThrowsCount:LnInvoiceUtils.kt$LnInvoiceUtils$private fun decodeUnlimitedLength(invoice: String): Boolean</ID>
    <ID>ThrowsCount:NostrWalletConnectParser.kt$fun String.parseNWCUrl(): NostrWallet</ID>
    <ID>ThrowsCount:ZapRepository.kt$ZapRepository$suspend fun zap( userId: String, target: ZapTarget, amountInSats: ULong? = null, comment: String? = null, )</ID>
    <ID>ThrowsCount:ZapsApi.kt$ZapsApi$suspend fun fetchInvoice( request: LightningPayRequest, zapEvent: NostrEvent, satoshiAmountInMilliSats: ULong, comment: String = "", ): LightningPayResponse</ID>
    <ID>TooGenericExceptionCaught:NostrIncomingMessageParser.kt$error: Exception</ID>
    <ID>TooGenericExceptionThrown:DirectMessageEvents.kt$throw RuntimeException("no receiver id")</ID>
    <ID>TooManyFunctions:ConversionUtils.kt$net.primal.android.crypto.ConversionUtils.kt</ID>
    <ID>TooManyFunctions:NostrNotary.kt$NostrNotary</ID>
    <ID>TooManyFunctions:NostrResources.kt$net.primal.android.nostr.ext.NostrResources.kt</ID>
    <ID>TooManyFunctions:Tags.kt$net.primal.android.nostr.ext.Tags.kt</ID>
    <ID>TopLevelPropertyNaming:__PrimalIcons.kt$private var __PrimalIcons: ____KtList&lt;ImageVector&gt;? = null</ID>
    <ID>UnusedPrivateProperty:LnInvoiceUtils.kt$LnInvoiceUtils$/** The Bech32 character set for encoding. */ private const val CHARSET = "qpzry9x8gf2tvdw0s3jn54khce6mua7l"</ID>
    <ID>UnusedPrivateProperty:UnsuccessfulFileUpload.kt$UnsuccessfulFileUpload$cause: Throwable?</ID>
    <ID>UseCheckOrError:RelayPool.kt$RelayPool$throw IllegalStateException("$it is not allowed")</ID>
    <ID>UseRequire:ConversionUtils.kt$throw IllegalArgumentException("Expected $it but obtained ${decodedForm.first}")</ID>
    <ID>UseRequire:ZapBottomSheet.kt$throw IllegalArgumentException("There should be 6 zap options.")</ID>
    <ID>UseRequire:ZapsApi.kt$ZapsApi$throw IllegalArgumentException("request.allowsNostr must not be null or false.")</ID>
  </CurrentIssues>
</SmellBaseline>
